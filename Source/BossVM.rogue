module Boss

$include Attributes
$include BossObject
$include BossVM
$include CallCandidates
$include CmdExecute
$include CmdPreprocess
$include CmdStore
$include CmdType
$include CollectTypes
$include Module
$include Organizer
$include Parser       [optional]
$include Procedure
$include Program
$include Resolver
$include Scanner
$include Type


class BossVM [singleton]
  PROPERTIES
    new_elements      : [String:ProgramElements]
    resolved_elements : [String:ProgramElements]

    native_procedures = [String:Function()->Variant]

    program : Program
    stack   = Variant[]
    fp      : Int

  METHODS
    method deregister_native( full_signature:String )
      native_procedures.remove( full_signature )

    method execute( script:String )->Variant
      local error = launch
      if (error) throw error

      temporarily BossVM=this, Program=program
        local statements = Parser( "[EXECUTE]", script ).parse( Parser.ip_multi_line_statements )->(as Statements)
        local m_execute = GlobalMethod( statements.t, "execute", &statements=statements )
        m_execute.type_context = Program.default_module.type( Program.default_module.t, "Routine" )
        Resolver.resolve( m_execute )
        return Program.execute( m_execute )
      endTemporarily

    method include( file:File )->BossError
      # Loads file if not already loaded.
      file = _find_file( file )
      local filepath = file.filepath
      if (new_elements and new_elements.contains(filepath)) return null
      return load( file )

    method launch->BossError
      try
        temporarily BossVM = this
          if (new_elements and new_elements.count)
            local staged_program = Program( new_elements.values )
            resolved_elements = new_elements
            new_elements = null
            staged_program.organize
            staged_program.resolve
            staged_program.launch
            program = staged_program
          elseIf (not program)
            program = Program()
            program.organize
            program.resolve
            program.launch
          endIf
        endTemporarily
      catch (error:BossError)
        new_elements = null
        return error
      catch (error:Exception)
        new_elements = null
        return CompileError( "[INTERNAL ERROR] " + error )
      endTry

      return null

    method load( file:File )->BossError
      file = _find_file( file )
      local filepath = file.filepath

      _prepare_staging

      try
        temporarily BossVM = this
          local elements = Parser( File(filepath) ).parse->(as ProgramElements)
          new_elements[filepath] = elements
          (forEach in elements).preprocess
        endTemporarily

      catch (error:BossError)
        new_elements = null
        return error
      catch (error:Exception)
        new_elements = null
        return CompileError( "[INTERNAL ERROR] " + error, file.filepath )
      endTry

      return null

    method register_native( full_signature:String, callback:Function()->Variant )
      native_procedures[full_signature] = callback

    method unload( file:File )
      _prepare_staging

      local filepath = file.abs.filepath
      new_elements.remove( filepath )
      resolved_elements?.remove( filepath )

    method update->BossError
      try
        local error = launch
        if (error) return error

      catch (error:BossError)
        new_elements = null
        return error
      catch (error:Exception)
        new_elements = null
        return CompileError( "[INTERNAL ERROR] " + error )
      endTry

      return null

    method _find_file( file:File )->File
      file .= with_extension( ".boss" )
      return file.abs

    method _prepare_staging
      if (not new_elements)
        if (resolved_elements)
          new_elements = resolved_elements.cloned
        else
          new_elements = [String:ProgramElements]
        endIf
      endIf
endClass

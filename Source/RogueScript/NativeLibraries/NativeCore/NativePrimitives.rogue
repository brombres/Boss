module RogueScript

class NativePrimitives [singleton]
  METHODS
    method register( vm:VM )
      # Byte
      vm.register_type( "Rogue::Byte",
        NativeTypeInfo( &instance_of=(value)=>value.is_byte, &variant_type=Variant.TYPE_BYTE ) )

      # Character
      vm.register_type( "Rogue::Character",
        NativeTypeInfo( &instance_of=(value)=>value.is_character, &variant_type=Variant.TYPE_CHARACTER ) )

      # Int
      vm.register_definition( "Rogue::Int.BITS", Int.BITS->String )
      vm.register_global_method( "Rogue::Int.MAXIMUM", () => Int.MAXIMUM )
      vm.register_global_method( "Rogue::Int.MINIMUM", () => Int.MINIMUM )
      vm.register_method( "Rogue::Int.format(String)", () => VM.context->Int.format(VM.string(1)) )

      # Int32
      vm.register_type( "Rogue::Int32",
        NativeTypeInfo( &instance_of=(value)=>value.is_int32, &variant_type=Variant.TYPE_INT32 ) )

      # Int64
      vm.register_type( "Rogue::Int64",
        NativeTypeInfo( &instance_of=(value)=>value.is_int64, &variant_type=Variant.TYPE_INT64 ) )

      # Logical
      vm.register_type( "Rogue::Logical",
        NativeTypeInfo( &instance_of=(value)=>value.is_logical, &variant_type=Variant.TYPE_LOGICAL ) )

      # Real
      vm.register_type( "Rogue::Real",
        NativeTypeInfo( &instance_of=(value)=>value.is_real, &variant_type=Variant.TYPE_REAL ) )

      # Real32
      vm.register_type( "Rogue::Real32",
        NativeTypeInfo( &instance_of=(value)=>value.is_real32, &variant_type=Variant.TYPE_REAL32 ) )

      # Real64
      vm.register_type( "Rogue::Real64",
        NativeTypeInfo( &instance_of=(value)=>value.is_real64, &variant_type=Variant.TYPE_REAL64 ) )

      # Color
      vm.register_type( "Graphics::Color",
        NativeTypeInfo( &instance_of=(value)=>value.is_color, &variant_type=Variant.TYPE_COLOR ) )
      vm.register_constructor( "Graphics::Color(Int32)", ()=>Color(VM.int(0)) )
      vm.register_method( "Graphics::Color.argb->Int32", ()=>VM.context->Int32 )

      # Triangle
      vm.register_type( "Geometry::Triangle",
        NativeTypeInfo( &instance_of=(value)=>value.is_triangle, &variant_type=Variant.TYPE_TRIANGLE ) )
      vm.register_constructor( "Geometry::Triangle(XY,XY,XY)", ()=>Triangle(VM.xy(1),VM.xy(2),VM.xy(3)) )

      # XY
      vm.register_type( "Geometry::XY",
        NativeTypeInfo( &instance_of=(value)=>value.is_xy, &variant_type=Variant.TYPE_XY ) )
      vm.register_constructor( "Geometry::XY(Real,Real)", ()=>XY(VM.real(1),VM.real(2)) )
endClass

# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module RogueScript

class Cmd( t:Token )
  GLOBAL METHODS
    method to_character( st:String )->Character
      if (st is null or st.count == 0) return Character(0)
      return st[0]

  METHODS
    method init( existing:Cmd )
      t = existing.t

    method cloned->ThisType [propagated]
      return ThisType(this)

    method add( cmd:Cmd )
      throw UnsupportedOperationError()

    method clear
      throw UnsupportedOperationError()

    method count->Int
      return 0

    method description->String
      return "Cmd"

    method dispatch<<$m,$VisitorType>>( visitor:$VisitorType )  [propagated]
      visitor.$m( this )

    method dispatch<<$m,$VisitorType,$ReturnType>>( visitor:$VisitorType )->$ReturnType [propagated]
      return visitor.$m( this )

    method first->Cmd
      throw UnsupportedOperationError()

    method get( index:Int )->Cmd
      throw UnsupportedOperationError()

    method get<<$AsType>>( index:Int )->$AsType
      return get(index)->(as $AsType)

    method insert( element:Cmd, before_index=0:Int )
      throw UnsupportedOperationError()

    method last->Cmd
      throw UnsupportedOperationError()

    method remove_first->Cmd
      throw UnsupportedOperationError()

    method remove_last->Cmd
      throw UnsupportedOperationError()

    method set( index:Int, value:Cmd )
      throw UnsupportedOperationError()

    method to->Character
      return Character(this->Int)

    method to->Cmd[]
      throw UnsupportedOperationError()

    method to->Int
      return 0

    method to->Logical
      return (this->Int)?

    method to->Real
      return this->Int

    method to->String
      return description

    method to->Token[]
      throw UnsupportedOperationError()
endClass

class CmdList : Cmd
  PROPERTIES
    list = Cmd[]

  METHODS
    method init( t )
      noAction

    method init( t, element:Cmd )
      list.add( element )

    method init( t, element1:Cmd, element2:Cmd )
      list.add( element1 )
      list.add( element2 )

    method init( existing:CmdList )
      prior.init( existing )

      # Start with shallow clone
      list = existing.list.cloned

      # Turn into deep clone
      localize list
      forEach (cmd at i in list)
        if (cmd) list[i] = cmd.cloned
      endForEach

    method add( cmd:Cmd )
      @list.add( cmd )

    method clear
      @list.clear

    method count->Int
      return @list.count

    method description->String
      return "CmdList" + list_description

    method first->Cmd
      return @list.first

    method get( index:Int )->Cmd
      return @list[index]

    method insert( element:Cmd, before_index=0:Int )
      list.insert( element, before_index )

    method last->Cmd
      return @list.last

    method list_description->String
      local builder = String()
      builder.print '['
      forEach (element at index in @list)
        if (index > 0) builder.print ','
        builder.print( %element )
      endForEach
      builder.print ']'
      return builder

    method remove_first->Cmd
      return @list.remove_first

    method remove_last->Cmd
      return @list.remove_last

    method set( index:Int, value:Cmd )
      @list[index] = value

    method to->Cmd[]
      return @list

endClass

class TokenList : Cmd
  PROPERTIES
    tokens : Token[]

  METHODS
    method init( t )
      tokens = Token[]

    method init( t, tokens )

    method init( existing:TokenList )
      tokens = existing.tokens.cloned

    method description->String
      return "TokenList($)"(tokens)

    method to->Token[]
      return tokens
endClass

class Unary( t, operand:Cmd ) : Cmd
  METHODS
    method init( existing:Unary )
      prior.init( existing )
      operand = existing.operand.cloned

    method description->String
      return "Unary($)"(%operand)
endClass

class Binary( t, left:Cmd, right:Cmd ) : Cmd
  METHODS
    method init( existing:Binary )
      prior.init( existing )
      left = existing.left.cloned
      right = existing.right.cloned

    method description->String
      return "Binary($,$)"(%left,%right)
endClass

class Add : Binary
  METHODS
    method description->String
      return "Add($,$)" (%left,%right)

endClass

class Args : CmdList
  METHODS
    method description->String
      return "Args" + list_description
endClass

class Divide : Binary
  METHODS
    method description->String
      return "Divide($,$)" (%left,%right)

endClass

class LiteralString : Cmd
  PROPERTIES
    value : String

  METHODS
    method init( t, value )

    method init( existing:LiteralString )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralString($)" (%value)

    method to->Character
      return Cmd.to_character(value)

    method to->Int:     return value
    method to->Logical: return value?
    method to->String: return value

endClass

class Multiply : Binary
  METHODS
    method description->String
      return "Multiply($,$)" (%left,%right)

endClass

class Negate : Unary
  METHODS
    method description->String
      return "Negate($)" (%operand)

endClass

class Statements : CmdList
  METHODS
    method description->String
      return "Statements" + list_description
endClass

class Subtract : Binary
  METHODS
    method description->String
      return "Subtract($,$)" (%left,%right)

endClass

class Literal : Cmd
  METHODS
    method description->String
      return "Literal"
endClass

class LiteralPrimitive : Literal
  METHODS
    method description->String
      return "LiteralPrimitive"
endClass

class As : Cmd
  PROPERTIES
    operand : Cmd
    as_type : Type

  METHODS
    method init( t, operand, as_type )

    method init( existing:As )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.as_type) as_type = existing.as_type.cloned

    method description->String
      return "As($,$)" (%operand,%as_type)

endClass

class AttributeAPI : Cmd
  METHODS
    method description->String
      return "AttributeAPI"
endClass

class AttributeAbstract : Cmd
  METHODS
    method description->String
      return "AttributeAbstract"
endClass

class AttributeAppend : Cmd
  METHODS
    method description->String
      return "AttributeAppend"
endClass

class AttributeAspect : Cmd
  METHODS
    method description->String
      return "AttributeAspect"
endClass

class AttributeBitflags : Cmd
  METHODS
    method description->String
      return "AttributeBitflags"
endClass

class AttributeCompound : Cmd
  METHODS
    method description->String
      return "AttributeCompound"
endClass

class AttributeEssential : Cmd
  METHODS
    method description->String
      return "AttributeEssential"
endClass

class AttributeExport : Cmd
  METHODS
    method description->String
      return "AttributeExport"
endClass

class AttributeInsert : Cmd
  METHODS
    method description->String
      return "AttributeInsert"
endClass

class AttributeOverride : Cmd
  METHODS
    method description->String
      return "AttributeOverride"
endClass

class AttributePreferred : Cmd
  METHODS
    method description->String
      return "AttributePreferred"
endClass

class AttributePrimitive : Cmd
  METHODS
    method description->String
      return "AttributePrimitive"
endClass

class AttributePropagated : Cmd
  METHODS
    method description->String
      return "AttributePropagated"
endClass

class AttributeReplace : Cmd
  METHODS
    method description->String
      return "AttributeReplace"
endClass

class AttributeReturnsThis : Cmd
  METHODS
    method description->String
      return "AttributeReturnsThis"
endClass

class AttributeSingleton : Cmd
  METHODS
    method description->String
      return "AttributeSingleton"
endClass

class BitShiftLeft : Binary
  METHODS
    method description->String
      return "BitShiftLeft($,$)" (%left,%right)

endClass

class BitShiftLeftAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftLeftAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitShiftLeftAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "BitShiftLeftAndAssignLocal($,$)" (%info,%operand)

endClass

class BitShiftLeftAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitShiftLeftAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitShiftLeftAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitShiftLeftAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftLeftAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitShiftRight : Binary
  METHODS
    method description->String
      return "BitShiftRight($,$)" (%left,%right)

endClass

class BitShiftRightX : Binary
  METHODS
    method description->String
      return "BitShiftRightX($,$)" (%left,%right)

endClass

class BitShiftRightXAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftRightXAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitShiftRightXAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "BitShiftRightXAndAssignLocal($,$)" (%info,%operand)

endClass

class BitShiftRightXAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitShiftRightXAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitShiftRightXAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitShiftRightXAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitShiftRightXAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitwiseAnd : Binary
  METHODS
    method description->String
      return "BitwiseAnd($,$)" (%left,%right)

endClass

class BitwiseAndAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseAndAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitwiseAndAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "BitwiseAndAndAssignLocal($,$)" (%info,%operand)

endClass

class BitwiseAndAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitwiseAndAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitwiseAndAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitwiseAndAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseAndAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitwiseNot : Unary
  METHODS
    method description->String
      return "BitwiseNot($)" (%operand)

endClass

class BitwiseOr : Binary
  METHODS
    method description->String
      return "BitwiseOr($,$)" (%left,%right)

endClass

class BitwiseOrAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseOrAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitwiseOrAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "BitwiseOrAndAssignLocal($,$)" (%info,%operand)

endClass

class BitwiseOrAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitwiseOrAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitwiseOrAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitwiseOrAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseOrAndAssignThisProperty($,$)" (%info,%operand)

endClass

class BitwiseXor : Binary
  METHODS
    method description->String
      return "BitwiseXor($,$)" (%left,%right)

endClass

class BitwiseXorAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseXorAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class BitwiseXorAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "BitwiseXorAndAssignLocal($,$)" (%info,%operand)

endClass

class BitwiseXorAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:BitwiseXorAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "BitwiseXorAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class BitwiseXorAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "BitwiseXorAndAssignThisProperty($,$)" (%info,%operand)

endClass

class Block : ControlStructure
  PROPERTIES
    assignments : Cmd

  METHODS
    method init( t, assignments, statements )

    method init( existing:Block )
      prior.init( existing )
      if (existing.assignments) assignments = existing.assignments.cloned

    method description->String
      return "Block($,$)" (%assignments,%statements)

endClass

class BriefTrace : Cmd
  PROPERTIES
    expressions : TracedExpressions

  METHODS
    method init( t, expressions )

    method init( existing:BriefTrace )
      prior.init( existing )
      if (existing.expressions) expressions = existing.expressions.cloned

    method description->String
      return "BriefTrace($)" (%expressions)

endClass

class CallbackFunction : Cmd
  PROPERTIES
    context     : Cmd
    name        : String
    param_types : TypeList

  METHODS
    method init( t, context, name, param_types )

    method init( existing:CallbackFunction )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name
      if (existing.param_types) param_types = existing.param_types.cloned

    method description->String
      return "CallbackFunction($,$,$)" (%context,%name,%param_types)

endClass

class Catch : ControlStructure
  PROPERTIES
    var_name       : String
    exception_type : Type

  METHODS
    method init( t, var_name, exception_type, statements )

    method init( existing:Catch )
      prior.init( existing )
      var_name = existing.var_name
      if (existing.exception_type) exception_type = existing.exception_type.cloned

    method description->String
      return "Catch($,$,$)" (%var_name,%exception_type,%statements)

endClass

class Catches : CmdList
  METHODS
    method description->String
      return "Catches" + list_description
endClass

class CommandExists : Cmd
  PROPERTIES
    command : Cmd

  METHODS
    method init( t, command )

    method init( existing:CommandExists )
      prior.init( existing )
      if (existing.command) command = existing.command.cloned

    method description->String
      return "CommandExists($)" (%command)

endClass

class Compare : Binary
  METHODS
    method description->String
      return "Compare($,$)" (%left,%right)

endClass

class CompareEQ : Binary
  METHODS
    method description->String
      return "CompareEQ($,$)" (%left,%right)

endClass

class CompareGE : Binary
  METHODS
    method description->String
      return "CompareGE($,$)" (%left,%right)

endClass

class CompareGT : Binary
  METHODS
    method description->String
      return "CompareGT($,$)" (%left,%right)

endClass

class CompareLE : Binary
  METHODS
    method description->String
      return "CompareLE($,$)" (%left,%right)

endClass

class CompareLT : Binary
  METHODS
    method description->String
      return "CompareLT($,$)" (%left,%right)

endClass

class CompareNE : Binary
  METHODS
    method description->String
      return "CompareNE($,$)" (%left,%right)

endClass

class CompareOp : Binary
  METHODS
    method description->String
      return "CompareOp($,$)" (%left,%right)

endClass

class Conditional : ControlStructure
  PROPERTIES
    condition : Cmd

  METHODS
    method init( t, condition, statements )

    method init( existing:Conditional )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned

    method description->String
      return "Conditional($,$)" (%condition,%statements)

endClass

class ContextCommandBlock : Cmd
  PROPERTIES
    context  : Cmd
    commands : Cmd

  METHODS
    method init( t, context, commands )

    method init( existing:ContextCommandBlock )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.commands) commands = existing.commands.cloned

    method description->String
      return "ContextCommandBlock($,$)" (%context,%commands)

endClass

class ContextBlockContext : Cmd
  METHODS
    method description->String
      return "ContextBlockContext"
endClass

class ContextDirectAccess : Cmd
  PROPERTIES
    context : Cmd
    name    : String

  METHODS
    method init( t, context, name )

    method init( existing:ContextDirectAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name

    method description->String
      return "ContextDirectAccess($,$)" (%context,%name)

endClass

class Contingent : ControlStructure
  PROPERTIES
    satisfied_statements   : Cmd
    unsatisfied_statements : Cmd

  METHODS
    method init( t, statements, satisfied_statements, unsatisfied_statements )

    method init( existing:Contingent )
      prior.init( existing )
      if (existing.satisfied_statements) satisfied_statements = existing.satisfied_statements.cloned
      if (existing.unsatisfied_statements) unsatisfied_statements = existing.unsatisfied_statements.cloned

    method description->String
      return "Contingent($,$,$)" (%statements,%satisfied_statements,%unsatisfied_statements)

endClass

class Convert : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:Convert )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "Convert($)" (%operand)

endClass

class ConvertToByte : Convert
  METHODS
    method description->String
      return "ConvertToByte($)" (%operand)

endClass

class ConvertToCharacter : Convert
  METHODS
    method description->String
      return "ConvertToCharacter($)" (%operand)

endClass

class ConvertToInt : Convert
  METHODS
    method description->String
      return "ConvertToInt($)" (%operand)

endClass

class ConvertToInt32 : Convert
  METHODS
    method description->String
      return "ConvertToInt32($)" (%operand)

endClass

class ConvertToInt64 : Convert
  METHODS
    method description->String
      return "ConvertToInt64($)" (%operand)

endClass

class ConvertToLogical : Convert
  METHODS
    method description->String
      return "ConvertToLogical($)" (%operand)

endClass

class ConvertToReal : Convert
  METHODS
    method description->String
      return "ConvertToReal($)" (%operand)

endClass

class ConvertToReal32 : Convert
  METHODS
    method description->String
      return "ConvertToReal32($)" (%operand)

endClass

class ConvertToReal64 : Convert
  METHODS
    method description->String
      return "ConvertToReal64($)" (%operand)

endClass

class ConvertToType : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type

  METHODS
    method init( t, operand, to_type )

    method init( existing:ConvertToType )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned

    method description->String
      return "ConvertToType($,$)" (%operand,%to_type)

endClass

class CreateRange : Cmd
  PROPERTIES
    start     : Cmd
    limit     : Cmd
    step_size : Cmd

  METHODS
    method init( t, start, limit, step_size )

    method init( existing:CreateRange )
      prior.init( existing )
      if (existing.start) start = existing.start.cloned
      if (existing.limit) limit = existing.limit.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "CreateRange($,$,$)" (%start,%limit,%step_size)

endClass

class CreateRangeDownTo : CreateRange
  METHODS
    method description->String
      return "CreateRangeDownTo($,$,$)" (%start,%limit,%step_size)

endClass

class CreateRangeDownToGreaterThan : CreateRange
  METHODS
    method description->String
      return "CreateRangeDownToGreaterThan($,$,$)" (%start,%limit,%step_size)

endClass

class CreateRangeUpTo : CreateRange
  METHODS
    method description->String
      return "CreateRangeUpTo($,$,$)" (%start,%limit,%step_size)

endClass

class CreateRangeUpToLessThan : CreateRange
  METHODS
    method description->String
      return "CreateRangeUpToLessThan($,$,$)" (%start,%limit,%step_size)

endClass

class DecrementGlobalProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:DecrementGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementGlobalProperty($)" (%info)

endClass

class DecrementLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:DecrementLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementLocal($)" (%info)

endClass

class DecrementProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:DecrementProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementProperty($,$)" (%context,%info)

endClass

class DecrementThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:DecrementThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "DecrementThisProperty($)" (%info)

endClass

class DefaultArg : Unary
  METHODS
    method description->String
      return "DefaultArg($)" (%operand)

endClass

class DefaultValue : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:DefaultValue )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "DefaultValue($)" (%of_type)

endClass

class Definition : Cmd
  PROPERTIES
    name  : String
    value : Cmd

  METHODS
    method init( t, name, value )

    method init( existing:Definition )
      prior.init( existing )
      name = existing.name
      if (existing.value) value = existing.value.cloned

    method description->String
      return "Definition($,$)" (%name,%value)

endClass

class Describe : Unary
  METHODS
    method description->String
      return "Describe($)" (%operand)

endClass

class DirectAccess : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:DirectAccess )
      prior.init( existing )
      name = existing.name

    method description->String
      return "DirectAccess($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int:     return name
    method to->Logical: return name?
    method to->String: return name

endClass

class DivideAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "DivideAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class DivideAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "DivideAndAssignLocal($,$)" (%info,%operand)

endClass

class DivideAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:DivideAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "DivideAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class DivideAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "DivideAndAssignThisProperty($,$)" (%info,%operand)

endClass

class DummyInitialValue : Cmd
  METHODS
    method description->String
      return "DummyInitialValue"
endClass

class EmptyCompound : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:EmptyCompound )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "EmptyCompound($)" (%of_type)

endClass

class EmptyVariantList : Cmd
  METHODS
    method description->String
      return "EmptyVariantList"
endClass

class EmptyVariantTable : Cmd
  METHODS
    method description->String
      return "EmptyVariantTable"
endClass

class EnumValue : Cmd
  PROPERTIES
    of_type : Type
    name    : String

  METHODS
    method init( t, of_type, name )

    method init( existing:EnumValue )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      name = existing.name

    method description->String
      return "EnumValue($,$)" (%of_type,%name)

endClass

class EnumValueDef : Cmd
  PROPERTIES
    value : Cmd

  METHODS
    method init( t, value )

    method init( existing:EnumValueDef )
      prior.init( existing )
      if (existing.value) value = existing.value.cloned

    method description->String
      return "EnumValueDef($)" (%value)

endClass

class Escape : Cmd
  METHODS
    method description->String
      return "Escape"
endClass

class ExplicitCast : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type

  METHODS
    method init( t, operand, to_type )

    method init( existing:ExplicitCast )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned

    method description->String
      return "ExplicitCast($,$)" (%operand,%to_type)

endClass

class FunctionDefinition : Cmd
  PROPERTIES
    parameters  : Parameters
    return_type : Type
    with_values : WithValues
    statements  : Cmd

  METHODS
    method init( t, parameters, return_type, with_values, statements )

    method init( existing:FunctionDefinition )
      prior.init( existing )
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.return_type) return_type = existing.return_type.cloned
      if (existing.with_values) with_values = existing.with_values.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "FunctionDefinition($,$,$,$)" (%parameters,%return_type,%with_values,%statements)

endClass

class FunctionReturnValue : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:FunctionReturnValue )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "FunctionReturnValue($)" (%operand)

endClass

class FunctionType : Type
  PROPERTIES
    param_types : TypeList
    return_type : Type

  METHODS
    method init( t, param_types, return_type )

    method init( existing:FunctionType )
      prior.init( existing )
      if (existing.param_types) param_types = existing.param_types.cloned
      if (existing.return_type) return_type = existing.return_type.cloned

    method description->String
      return "FunctionType($,$)" (%param_types,%return_type)

endClass

class GenericFnArg : Cmd
  METHODS
    method description->String
      return "GenericFnArg"
endClass

class GenericFunctionDefinition : Cmd
  PROPERTIES
    parameters  : IDList
    with_values : WithValues
    statements  : Cmd

  METHODS
    method init( t, parameters, with_values, statements )

    method init( existing:GenericFunctionDefinition )
      prior.init( existing )
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.with_values) with_values = existing.with_values.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "GenericFunctionDefinition($,$,$)" (%parameters,%with_values,%statements)

endClass

class GlobalPropertyDeclarations : Cmd
  PROPERTIES
    list : Cmd
    type         : Type
    attributes   : Attributes
    doc          : String

  METHODS
    method init( t, list, type, attributes, doc )

    method init( existing:GlobalPropertyDeclarations )
      prior.init( existing )
      if (existing.list) list = existing.list.cloned
      if (existing.type) type = existing.type.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      doc = existing.doc

    method description->String
      return "GlobalPropertyDeclarations($,$,$,$)" (%list,%type,%attributes,%doc)

endClass

class IDList : CmdList
  METHODS
    method description->String
      return "IDList" + list_description
endClass

class Identifier : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Identifier )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Identifier($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int:     return name
    method to->Logical: return name?
    method to->String: return name

endClass

class Identifiers : CmdList
  METHODS
    method description->String
      return "Identifiers" + list_description
endClass

class If : Conditional
  PROPERTIES
    cmd_else : Cmd

  METHODS
    method init( t, condition, statements, cmd_else )

    method init( existing:If )
      prior.init( existing )
      if (existing.cmd_else) cmd_else = existing.cmd_else.cloned

    method description->String
      return "If($,$,$)" (%condition,%statements,%cmd_else)

endClass

class IfConditionalContext : Cmd
  PROPERTIES
    conditional_context : ConditionalContext
    statements          : Cmd

  METHODS
    method init( t, conditional_context, statements )

    method init( existing:IfConditionalContext )
      prior.init( existing )
      if (existing.conditional_context) conditional_context = existing.conditional_context.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "IfConditionalContext($,$)" (%conditional_context,%statements)

endClass

class IfLocal : Cmd
  PROPERTIES
    name       : String
    expression : Cmd
    statements : Cmd
    else_if    : IfLocal

  METHODS
    method init( t, name, expression, statements, else_if )

    method init( existing:IfLocal )
      prior.init( existing )
      name = existing.name
      if (existing.expression) expression = existing.expression.cloned
      if (existing.statements) statements = existing.statements.cloned
      if (existing.else_if) else_if = existing.else_if.cloned

    method description->String
      return "IfLocal($,$,$,$)" (%name,%expression,%statements,%else_if)

endClass

class IncrementGlobalProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:IncrementGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementGlobalProperty($)" (%info)

endClass

class IncrementLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:IncrementLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementLocal($)" (%info)

endClass

class IncrementProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:IncrementProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementProperty($,$)" (%context,%info)

endClass

class IncrementThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:IncrementThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "IncrementThisProperty($)" (%info)

endClass

class IndexedAccess : Cmd
  PROPERTIES
    context : Cmd
    index   : Cmd

  METHODS
    method init( t, context, index )

    method init( existing:IndexedAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.index) index = existing.index.cloned

    method description->String
      return "IndexedAccess($,$)" (%context,%index)

endClass

class InlineAssignment : Cmd
  PROPERTIES
    info  : Local
    value : Cmd

  METHODS
    method init( t, info, value )

    method init( existing:InlineAssignment )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.value) value = existing.value.cloned

    method description->String
      return "InlineAssignment($,$)" (%info,%value)

endClass

class InlineWhich : Cmd
  PROPERTIES
    cases : InlineWhichCases

  METHODS
    method init( t, cases )

    method init( existing:InlineWhich )
      prior.init( existing )
      if (existing.cases) cases = existing.cases.cloned

    method description->String
      return "InlineWhich($)" (%cases)

endClass

class InlineWhichCase : Cmd
  PROPERTIES
    condition : Cmd
    value     : Cmd

  METHODS
    method init( t, condition, value )

    method init( existing:InlineWhichCase )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned
      if (existing.value) value = existing.value.cloned

    method description->String
      return "InlineWhichCase($,$)" (%condition,%value)

endClass

class InlineWhichCases : CmdList
  METHODS
    method description->String
      return "InlineWhichCases" + list_description
endClass

class InstanceOf : Cmd
  PROPERTIES
    operand      : Cmd
    compare_type : Type

  METHODS
    method init( t, operand, compare_type )

    method init( existing:InstanceOf )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.compare_type) compare_type = existing.compare_type.cloned

    method description->String
      return "InstanceOf($,$)" (%operand,%compare_type)

endClass

class IntrospectionGetObjectProperty : Cmd
  PROPERTIES
    info    : Property
    context : Cmd

  METHODS
    method init( t, info, context )

    method init( existing:IntrospectionGetObjectProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.context) context = existing.context.cloned

    method description->String
      return "IntrospectionGetObjectProperty($,$)" (%info,%context)

endClass

class Is : Binary
  METHODS
    method description->String
      return "Is($,$)" (%left,%right)

endClass

class IsCompound : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsCompound )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsCompound($)" (%operand)

endClass

class IsEnum : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsEnum )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsEnum($)" (%operand)

endClass

class IsNot : Binary
  METHODS
    method description->String
      return "IsNot($,$)" (%left,%right)

endClass

class IsPrimitive : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsPrimitive )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsPrimitive($)" (%operand)

endClass

class IsReference : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:IsReference )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "IsReference($)" (%operand)

endClass

class IsType : Cmd
  PROPERTIES
    operand      : Cmd
    compare_type : Type

  METHODS
    method init( t, operand, compare_type )

    method init( existing:IsType )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.compare_type) compare_type = existing.compare_type.cloned

    method description->String
      return "IsType($,$)" (%operand,%compare_type)

endClass

class Iterator : Conditional
  PROPERTIES
    control : Cmd
    upkeep  : Cmd

  METHODS
    method init( t, control, condition, statements, upkeep )

    method init( existing:Iterator )
      prior.init( existing )
      if (existing.control) control = existing.control.cloned
      if (existing.upkeep) upkeep = existing.upkeep.cloned

    method description->String
      return "Iterator($,$,$,$)" (%control,%condition,%statements,%upkeep)

endClass

class KeyValuePair : Cmd
  PROPERTIES
    key   : Cmd
    value : Cmd

  METHODS
    method init( t, key, value )

    method init( existing:KeyValuePair )
      prior.init( existing )
      if (existing.key) key = existing.key.cloned
      if (existing.value) value = existing.value.cloned

    method description->String
      return "KeyValuePair($,$)" (%key,%value)

endClass

class KeyValuePairList : CmdList
  METHODS
    method description->String
      return "KeyValuePairList" + list_description
endClass

class LiteralCharacter : LiteralPrimitive
  PROPERTIES
    value : Character

  METHODS
    method init( t, value )

    method init( existing:LiteralCharacter )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralCharacter($)" (%value)

    method to->Character: return value
    method to->Int:       return value
    method to->String:    return value

endClass

class LiteralInt : LiteralPrimitive
  PROPERTIES
    content : String
    value   : Int
    base    : Int

  METHODS
    method init( t, content, base )
      value = content->Int( base )

    method init( t, value )

    method init( existing:LiteralInt )
      prior.init( existing )
      content = existing.content
      base = existing.base
      value = existing.value

    method description->String
      if (content) return "LiteralInt($,$)" (%content,%base)
      else         return value

endClass

class LiteralList : CmdList
  METHODS
    method description->String
      return "LiteralList" + list_description
endClass

class LiteralLogical : LiteralPrimitive
  PROPERTIES
    value : Logical

  METHODS
    method init( t, value )

    method init( existing:LiteralLogical )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralLogical($)" (%value)

    method to->Int:     return which{value:1 || 0}
    method to->Logical: return value
    method to->String:  return which{value:"true" || "false"}

endClass

class LiteralNull : Literal
  METHODS
    method description->String
      return "LiteralNull"
endClass

class LiteralNullOptional : Literal
  PROPERTIES
    optional_type : Type

  METHODS
    method init( t, optional_type )

    method init( existing:LiteralNullOptional )
      prior.init( existing )
      if (existing.optional_type) optional_type = existing.optional_type.cloned

    method description->String
      return "LiteralNullOptional($)" (%optional_type)

endClass

class LiteralPi : Literal
  METHODS
    method description->String
      return "LiteralPi"
endClass

class LiteralUndefined : Cmd
  METHODS
    method description->String
      return "LiteralUndefined"
endClass

class Local : Cmd
  PROPERTIES
    name                 : String
    initial_value        : Cmd
    initial_value_tokens : TokenList
    type                 : Type
    attribute            : String
    index                : Int  # stack index within procedure

  METHODS
    method init( t, name, initial_value, initial_value_tokens, type, attribute )

    method init( t, name, initial_value, initial_value_tokens, type )

    method init( t, name, type )

    method init( existing:Local )
      prior.init( existing )
      name = existing.name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.initial_value_tokens) initial_value_tokens = existing.initial_value_tokens.cloned
      if (existing.type) type = existing.type.cloned
      attribute = existing.attribute

    method description->String
      return "Local($,$,$,$,$)" (%name,%initial_value,%initial_value_tokens,%type,%attribute)

endClass

class LocalDeclaration : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:LocalDeclaration )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "LocalDeclaration($)" (%info)

endClass

class LogicalAnd : LogicalBinary
  METHODS
    method description->String
      return "LogicalAnd($,$)" (%left,%right)

endClass

class LogicalNot : LogicalUnary
  METHODS
    method description->String
      return "LogicalNot($)" (%operand)

endClass

class LogicalOr : LogicalBinary
  METHODS
    method description->String
      return "LogicalOr($,$)" (%left,%right)

endClass

class LogicalXor : LogicalBinary
  METHODS
    method description->String
      return "LogicalXor($,$)" (%left,%right)

endClass

class Logicalize : Unary
  METHODS
    method description->String
      return "Logicalize($)" (%operand)

endClass

class Logicalized : Unary
  METHODS
    method description->String
      return "Logicalized($)" (%operand)

endClass

class Loop : Cmd
  PROPERTIES
    loop_count : Cmd
    statements : Cmd

  METHODS
    method init( t, loop_count, statements )

    method init( existing:Loop )
      prior.init( existing )
      if (existing.loop_count) loop_count = existing.loop_count.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "Loop($,$)" (%loop_count,%statements)

endClass

class Methods : CmdList
  METHODS
    method description->String
      return "Methods" + list_description
endClass

class Mod : Binary
  METHODS
    method description->String
      return "Mod($,$)" (%left,%right)

endClass

class ModuleQualifiedID : Cmd
  PROPERTIES
    context : Cmd
    name    : String

  METHODS
    method init( t, context, name )

    method init( existing:ModuleQualifiedID )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name

    method description->String
      return "ModuleQualifiedID($,$)" (%context,%name)

    method to->String
      return "$::$"(context,name)

endClass

class MultiplyAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "MultiplyAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class MultiplyAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "MultiplyAndAssignLocal($,$)" (%info,%operand)

endClass

class MultiplyAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:MultiplyAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "MultiplyAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class MultiplyAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "MultiplyAndAssignThisProperty($,$)" (%info,%operand)

endClass

class NamedArg : Cmd
  PROPERTIES
    name    : String
    value   : Cmd
    zero    : Logical
    forward : Logical

  METHODS
    method init( t, name, value, zero )

    method init( t, name, value )

    method init( t, name, value, zero, forward )

    method init( existing:NamedArg )
      prior.init( existing )
      name = existing.name
      if (existing.value) value = existing.value.cloned
      zero = existing.zero
      forward = existing.forward

    method description->String
      return "NamedArg($,$,$,$)" (%name,%value,%zero,%forward)

endClass

class NativeCode : Cmd
  PROPERTIES
    ordinal : Int
    content : String

  METHODS
    method init( t, ordinal, content )

    method init( existing:NativeCode )
      prior.init( existing )
      ordinal = existing.ordinal
      content = existing.content

    method description->String
      return "NativeCode($,$)" (%ordinal,%content)

endClass

class NativeExpression : Cmd
  PROPERTIES
    content     : String
    result_type : Type

  METHODS
    method init( t, content, result_type )

    method init( existing:NativeExpression )
      prior.init( existing )
      content = existing.content
      if (existing.result_type) result_type = existing.result_type.cloned

    method description->String
      return "NativeExpression($,$)" (%content,%result_type)

endClass

class NativeHeader : Cmd
  PROPERTIES
    ordinal : Int
    content : String

  METHODS
    method init( t, ordinal, content )

    method init( existing:NativeHeader )
      prior.init( existing )
      ordinal = existing.ordinal
      content = existing.content

    method description->String
      return "NativeHeader($,$)" (%ordinal,%content)

endClass

class NativeProperty : Cmd
  PROPERTIES
    target     : String
    expression : String

  METHODS
    method init( t, target, expression )

    method init( existing:NativeProperty )
      prior.init( existing )
      target = existing.target
      expression = existing.expression

    method description->String
      return "NativeProperty($,$)" (%target,%expression)

endClass

class NativeStatement : Cmd
  PROPERTIES
    content : String

  METHODS
    method init( t, content )

    method init( existing:NativeStatement )
      prior.init( existing )
      content = existing.content

    method description->String
      return "NativeStatement($)" (%content)

    method to->Character
      return Cmd.to_character(content)

    method to->Int:     return content
    method to->Logical: return content?
    method to->String: return content

endClass

class NotInstanceOf : Cmd
  PROPERTIES
    operand      : Cmd
    compare_type : Type

  METHODS
    method init( t, operand, compare_type )

    method init( existing:NotInstanceOf )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.compare_type) compare_type = existing.compare_type.cloned

    method description->String
      return "NotInstanceOf($,$)" (%operand,%compare_type)

endClass

class NotIsType : Cmd
  PROPERTIES
    operand      : Cmd
    compare_type : Type

  METHODS
    method init( t, operand, compare_type )

    method init( existing:NotIsType )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.compare_type) compare_type = existing.compare_type.cloned

    method description->String
      return "NotIsType($,$)" (%operand,%compare_type)

endClass

class OpAndAssign : Cmd
  PROPERTIES
    target  : Cmd
    operand : Cmd

  METHODS
    method init( t, target, operand )

    method init( existing:OpAndAssign )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "OpAndAssign($,$)" (%target,%operand)

endClass

class Parameters : CmdList
  METHODS
    method get( index:Int )->Local
      return @list[index]->(as Local)

    method description->String
      return "Parameters" + list_description
endClass

class Placeholder : Cmd
  PROPERTIES
    name : String

  METHODS
    method init( t, name )

    method init( existing:Placeholder )
      prior.init( existing )
      name = existing.name

    method description->String
      return "Placeholder($)" (%name)

    method to->Character
      return Cmd.to_character(name)

    method to->Int:     return name
    method to->Logical: return name?
    method to->String: return name

endClass

class Power : Binary
  METHODS
    method description->String
      return "Power($,$)" (%left,%right)

endClass

class PreDecrementLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:PreDecrementLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "PreDecrementLocal($)" (%info)

endClass

class Property : Cmd
  PROPERTIES
    name          : String
    initial_value : Cmd
    type          : Type
    attributes    : Attributes
    type_context  : Type

  METHODS
    method init( t, name, initial_value, type )

    method init( existing:Property )
      prior.init( existing )
      name = existing.name
      if (existing.initial_value) initial_value = existing.initial_value.cloned
      if (existing.type) type = existing.type.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      type_context = existing.type_context

    method description->String
      return "Property($,$,$,$)" (%name,%initial_value,%type,%attributes)

endClass

class PropertyDeclarations : Cmd
  PROPERTIES
    list         : PropertyList
    type         : Type
    attributes   : Attributes
    doc          : String

  METHODS
    method init( t, list, type, attributes, doc )

    method init( existing:PropertyDeclarations )
      prior.init( existing )
      if (existing.list) list = existing.list.cloned
      if (existing.type) type = existing.type.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      doc = existing.doc

    method description->String
      return "PropertyDeclarations($,$,$,$)" (%list,%type,%attributes,%doc)

endClass

class PushStackTraceCutoff : Cmd
  METHODS
    method description->String
      return "PushStackTraceCutoff"
endClass

class OpAndAssignLocal : Cmd
  PROPERTIES
    info    : Local
    operand : Cmd

  METHODS
    method init( t, info, operand )

    method init( existing:OpAndAssignLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "OpAndAssignLocal($,$)" (%info,%operand)

endClass

class OpAndAssignProperty : Cmd
  PROPERTIES
    info    : Property
    operand : Cmd

  METHODS
    method init( t, info, operand )

    method init( existing:OpAndAssignProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "OpAndAssignProperty($,$)" (%info,%operand)

endClass

class ReturnOnException : Cmd
  METHODS
    method description->String
      return "ReturnOnException"
endClass

class StateDef : Cmd
  PROPERTIES
    name    : String
    methods : Methods

  METHODS
    method init( t, name, methods )

    method init( existing:StateDef )
      prior.init( existing )
      name = existing.name
      if (existing.methods) methods = existing.methods.cloned

    method description->String
      return "StateDef($,$)" (%name,%methods)

endClass

class Stepper : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:Stepper )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "Stepper($)" (%operand)

endClass

class SubtractAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "SubtractAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class SubtractAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "SubtractAndAssignLocal($,$)" (%info,%operand)

endClass

class SubtractAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:SubtractAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "SubtractAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class SubtractAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "SubtractAndAssignThisProperty($,$)" (%info,%operand)

endClass

class Switch : Conditional
  PROPERTIES
    cases : WhichCases

  METHODS
    method init( t, condition, cases, statements )

    method init( existing:Switch )
      prior.init( existing )
      if (existing.cases) cases = existing.cases.cloned

    method description->String
      return "Switch($,$,$)" (%condition,%cases,%statements)

endClass

class Temporarily : ControlStructure
  PROPERTIES
    assignments : TemporaryAssignments

  METHODS
    method init( t, assignments, statements )

    method init( existing:Temporarily )
      prior.init( existing )
      if (existing.assignments) assignments = existing.assignments.cloned

    method description->String
      return "Temporarily($,$)" (%assignments,%statements)

endClass

class TemporaryAssignment : Cmd
  PROPERTIES
    target    : Cmd
    new_value : Cmd

  METHODS
    method init( t, target, new_value )

    method init( existing:TemporaryAssignment )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "TemporaryAssignment($,$)" (%target,%new_value)

endClass

class TemporaryAssignments : CmdList
  METHODS
    method description->String
      return "TemporaryAssignments" + list_description
endClass

class TracedExpression : Cmd
  PROPERTIES
    expression : Cmd
    token_list : TokenList

  METHODS
    method init( t, expression, token_list )

    method init( existing:TracedExpression )
      prior.init( existing )
      if (existing.expression) expression = existing.expression.cloned
      if (existing.token_list) token_list = existing.token_list.cloned

    method description->String
      return "TracedExpression($,$)" (%expression,%token_list)

endClass

class TracedExpressions : CmdList
  METHODS
    method description->String
      return "TracedExpressions" + list_description
endClass

class Try : ControlStructure
  PROPERTIES
    catches : Catches

  METHODS
    method init( t, statements, catches )

    method init( existing:Try )
      prior.init( existing )
      if (existing.catches) catches = existing.catches.cloned

    method description->String
      return "Try($,$)" (%statements,%catches)

endClass

class TypeContext : Cmd
  PROPERTIES
    type : Type

  METHODS
    method init( t, type )

    method init( existing:TypeContext )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned

    method description->String
      return "TypeContext($)" (%type)

endClass

class TypeIndex : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:TypeIndex )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "TypeIndex($)" (%of_type)

endClass

class TypeList : CmdList
  METHODS
    method description->String
      return "TypeList" + list_description

    method get( index:Int )->Type
      return @list[index]->(as Type)
endClass

class TypedDestructuringLocal : Cmd
  PROPERTIES
    name : String
    type : Type

  METHODS
    method init( t, name, type )

    method init( existing:TypedDestructuringLocal )
      prior.init( existing )
      name = existing.name
      if (existing.type) type = existing.type.cloned

    method description->String
      return "TypedDestructuringLocal($,$)" (%name,%type)

endClass

class TypedLiteralList : Cmd
  PROPERTIES
    of_type : Type
    list    : Cmd

  METHODS
    method init( t, of_type, list )

    method init( existing:TypedLiteralList )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.list) list = existing.list.cloned

    method description->String
      return "TypedLiteralList($,$)" (%of_type,%list)

endClass

class TypedLiteralTable : Cmd
  PROPERTIES
    of_type : Type
    table   : KeyValuePairList

  METHODS
    method init( t, of_type, table )

    method init( existing:TypedLiteralTable )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.table) table = existing.table.cloned

    method description->String
      return "TypedLiteralTable($,$)" (%of_type,%table)

endClass

class Use : ControlStructure
  PROPERTIES
    resources : UsedResources

  METHODS
    method init( t, resources, statements )

    method init( existing:Use )
      prior.init( existing )
      if (existing.resources) resources = existing.resources.cloned

    method description->String
      return "Use($,$)" (%resources,%statements)

endClass

class UsedResource : Cmd
  PROPERTIES
    name     : String
    resource : Cmd

  METHODS
    method init( t, name, resource )

    method init( existing:UsedResource )
      prior.init( existing )
      name = existing.name
      if (existing.resource) resource = existing.resource.cloned

    method description->String
      return "UsedResource($,$)" (%name,%resource)

endClass

class UsedResources : CmdList
  METHODS
    method description->String
      return "UsedResources" + list_description
endClass

class VariantTable : Cmd
  PROPERTIES
    args : KeyValuePairList

  METHODS
    method init( t, args )

    method init( existing:VariantTable )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "VariantTable($)" (%args)

endClass

class VerboseTrace : Cmd
  PROPERTIES
    expressions : TracedExpressions

  METHODS
    method init( t, expressions )

    method init( existing:VerboseTrace )
      prior.init( existing )
      if (existing.expressions) expressions = existing.expressions.cloned

    method description->String
      return "VerboseTrace($)" (%expressions)

endClass

class Which : Conditional
  PROPERTIES
    cases : WhichCases

  METHODS
    method init( t, condition, cases, statements )

    method init( existing:Which )
      prior.init( existing )
      if (existing.cases) cases = existing.cases.cloned

    method description->String
      return "Which($,$,$)" (%condition,%cases,%statements)

endClass

class WhichCases : CmdList
  METHODS
    method description->String
      return "WhichCases" + list_description
endClass

class WideningCast : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type

  METHODS
    method init( t, operand, to_type )

    method init( existing:WideningCast )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned

    method description->String
      return "WideningCast($,$)" (%operand,%to_type)

endClass

class WithValue : Cmd
  PROPERTIES
    name  : String
    value : Cmd

  METHODS
    method init( t, name, value )

    method init( existing:WithValue )
      prior.init( existing )
      name = existing.name
      if (existing.value) value = existing.value.cloned

    method description->String
      return "WithValue($,$)" (%name,%value)

endClass

class WithValues : CmdList
  METHODS
    method description->String
      return "WithValues" + list_description
endClass

class AccessAndAssign : Cmd
  PROPERTIES
    operand : Cmd

  METHODS
    method init( t, operand )

    method init( existing:AccessAndAssign )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned

    method description->String
      return "AccessAndAssign($)" (%operand)

endClass

class AccessAndAssignContext : Cmd
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context )

    method init( existing:AccessAndAssignContext )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "AccessAndAssignContext($)" (%context)

endClass

class AddAndAssign : OpAndAssign
  METHODS
    method description->String
      return "AddAndAssign($,$)" (%target,%operand)

endClass

class Assert : Cmd
  PROPERTIES
    expression : Cmd
    token_list : TokenList

  METHODS
    method init( t, expression, token_list )

    method init( existing:Assert )
      prior.init( existing )
      if (existing.expression) expression = existing.expression.cloned
      if (existing.token_list) token_list = existing.token_list.cloned

    method description->String
      return "Assert($,$)" (%expression,%token_list)

endClass

class BitShiftLeftAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitShiftLeftAndAssign($,$)" (%target,%operand)

endClass

class BitShiftRightAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitShiftRightAndAssign($,$)" (%target,%operand)

endClass

class BitShiftRightXAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitShiftRightXAndAssign($,$)" (%target,%operand)

endClass

class BitwiseAndAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitwiseAndAndAssign($,$)" (%target,%operand)

endClass

class BitwiseOrAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitwiseOrAndAssign($,$)" (%target,%operand)

endClass

class BitwiseXorAndAssign : OpAndAssign
  METHODS
    method description->String
      return "BitwiseXorAndAssign($,$)" (%target,%operand)

endClass

class ConditionalContext : Cmd
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context )

    method init( existing:ConditionalContext )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "ConditionalContext($)" (%context)

endClass

class Decrement : Stepper
  METHODS
    method description->String
      return "Decrement($)" (%operand)

endClass

class SetModuleContext : Cmd
  PROPERTIES
    name       : String
    attributes : Attributes

  METHODS
    method init( t, name, attributes )

    method init( existing:SetModuleContext )
      prior.init( existing )
      name = existing.name
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "SetModuleContext($,$)" (%name,%attributes)

endClass

class DivideAndAssign : OpAndAssign
  METHODS
    method description->String
      return "DivideAndAssign($,$)" (%target,%operand)

endClass

class EscapeBlock : Escape
  METHODS
    method description->String
      return "EscapeBlock"
endClass

class EscapeContingent : Escape
  METHODS
    method description->String
      return "EscapeContingent"
endClass

class EscapeForEach : Escape
  METHODS
    method description->String
      return "EscapeForEach"
endClass

class EscapeIf : Escape
  METHODS
    method description->String
      return "EscapeIf"
endClass

class EscapeLoop : Escape
  METHODS
    method description->String
      return "EscapeLoop"
endClass

class EscapeTry : Escape
  METHODS
    method description->String
      return "EscapeTry"
endClass

class EscapeWhich : Escape
  METHODS
    method description->String
      return "EscapeWhich"
endClass

class EscapeWhile : Escape
  METHODS
    method description->String
      return "EscapeWhile"
endClass

class Increment : Stepper
  METHODS
    method description->String
      return "Increment($)" (%operand)

endClass

class ModAndAssign : OpAndAssign
  METHODS
    method description->String
      return "ModAndAssign($,$)" (%target,%operand)

endClass

class MultiplyAndAssign : OpAndAssign
  METHODS
    method description->String
      return "MultiplyAndAssign($,$)" (%target,%operand)

endClass

class Necessary : Cmd
  PROPERTIES
    condition : Cmd

  METHODS
    method init( t, condition )

    method init( existing:Necessary )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned

    method description->String
      return "Necessary($)" (%condition)

endClass

class NextIteration : Cmd
  METHODS
    method description->String
      return "NextIteration"
endClass

class Placeholders : CmdList
  METHODS
    method description->String
      return "Placeholders" + list_description
endClass

class PowerAndAssign : OpAndAssign
  METHODS
    method description->String
      return "PowerAndAssign($,$)" (%target,%operand)

endClass

class Return : Cmd
  PROPERTIES
    result : Cmd

  METHODS
    method init( t, result )

    method init( existing:Return )
      prior.init( existing )
      if (existing.result) result = existing.result.cloned

    method description->String
      return "Return($)" (%result)

endClass

class SubtractAndAssign : OpAndAssign
  METHODS
    method description->String
      return "SubtractAndAssign($,$)" (%target,%operand)

endClass

class Sufficient : Cmd
  PROPERTIES
    condition : Cmd

  METHODS
    method init( t, condition )

    method init( existing:Sufficient )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned

    method description->String
      return "Sufficient($)" (%condition)

endClass

class SwapValues : Cmd
  PROPERTIES
    a : Cmd
    b : Cmd

  METHODS
    method init( t, a, b )

    method init( existing:SwapValues )
      prior.init( existing )
      if (existing.a) a = existing.a.cloned
      if (existing.b) b = existing.b.cloned

    method description->String
      return "SwapValues($,$)" (%a,%b)

endClass

class Throw : Cmd
  PROPERTIES
    exception : Cmd

  METHODS
    method init( t, exception )

    method init( existing:Throw )
      prior.init( existing )
      if (existing.exception) exception = existing.exception.cloned

    method description->String
      return "Throw($)" (%exception)

endClass

class Assign : Cmd
  PROPERTIES
    target    : Cmd
    new_value : Cmd

  METHODS
    method init( t, target, new_value )

    method init( existing:Assign )
      prior.init( existing )
      if (existing.target) target = existing.target.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "Assign($,$)" (%target,%new_value)

endClass

class LocalList : CmdList
  METHODS
    method get( index:Int )->Local
      return @list[index]->(as Local)

    method description->String
      return "LocalList" + list_description
endClass


class LocalDeclarations : Cmd
  PROPERTIES
    list : LocalList
    type : Type

  METHODS
    method init( t, list, type )

    method init( existing:LocalDeclarations )
      prior.init( existing )
      if (existing.list) list = existing.list.cloned
      if (existing.type) type = existing.type.cloned

    method description->String
      return "LocalDeclarations($,$)" (%list,%type)

endClass


class WriteLocal : Cmd
  PROPERTIES
    info      : Local
    new_value : Cmd

  METHODS
    method init( t, info, new_value )

    method init( existing:WriteLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "WriteLocal($,$)" (%info,%new_value)

endClass

class SetLocalToDefaultValue : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:SetLocalToDefaultValue )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "SetLocalToDefaultValue($)" (%info)

endClass

class ReadLocal : Cmd
  PROPERTIES
    info : Local

  METHODS
    method init( t, info )

    method init( existing:ReadLocal )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "ReadLocal($)" (%info)

endClass

class AddInt : Add
  METHODS
    method description->String
      return "AddInt($,$)" (%left,%right)

endClass


class LiteralReal : LiteralPrimitive
  PROPERTIES
    value : Real

  METHODS
    method init( t, value )

    method init( existing:LiteralReal )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal($)" (%value)

    method to->Int:    return value
    method to->Real:   return value
    method to->String: return value

endClass


class ConvertIntToReal : Unary
  METHODS
    method description->String
      return "ConvertIntToReal($)" (%operand)

endClass

class AddReal : Add
  METHODS
    method description->String
      return "AddReal($,$)" (%left,%right)

endClass


class WriteLocalInt : WriteLocal
  METHODS
    method description->String
      return "WriteLocalInt($,$)" (%info,%new_value)

endClass

class SubtractInt : Add
  METHODS
    method description->String
      return "SubtractInt($,$)" (%left,%right)

endClass

class SubtractReal : Add
  METHODS
    method description->String
      return "SubtractReal($,$)" (%left,%right)

endClass


class CompareEQInt : CompareEQ
  METHODS
    method description->String
      return "CompareEQInt($,$)" (%left,%right)

endClass

class CompareEQReal : CompareEQ
  METHODS
    method description->String
      return "CompareEQReal($,$)" (%left,%right)

endClass

class CompareGEInt : CompareGE
  METHODS
    method description->String
      return "CompareGEInt($,$)" (%left,%right)

endClass

class CompareGEReal : CompareGE
  METHODS
    method description->String
      return "CompareGEReal($,$)" (%left,%right)

endClass

class CompareGTInt : CompareGT
  METHODS
    method description->String
      return "CompareGTInt($,$)" (%left,%right)

endClass

class CompareGTReal : CompareGT
  METHODS
    method description->String
      return "CompareGTReal($,$)" (%left,%right)

endClass

class CompareLEInt : CompareLE
  METHODS
    method description->String
      return "CompareLEInt($,$)" (%left,%right)

endClass

class CompareLEReal : CompareLE
  METHODS
    method description->String
      return "CompareLEReal($,$)" (%left,%right)

endClass

class CompareLTInt : CompareLT
  METHODS
    method description->String
      return "CompareLTInt($,$)" (%left,%right)

endClass

class CompareLTReal : CompareLT
  METHODS
    method description->String
      return "CompareLTReal($,$)" (%left,%right)

endClass

class CompareNEInt : CompareNE
  METHODS
    method description->String
      return "CompareNEInt($,$)" (%left,%right)

endClass

class CompareNEReal : CompareNE
  METHODS
    method description->String
      return "CompareNEReal($,$)" (%left,%right)

endClass

class DivideInt : Divide
  METHODS
    method description->String
      return "DivideInt($,$)" (%left,%right)

endClass

class DivideReal : Divide
  METHODS
    method description->String
      return "DivideReal($,$)" (%left,%right)

endClass

class ModInt : Mod
  METHODS
    method description->String
      return "ModInt($,$)" (%left,%right)

endClass

class ModReal : Mod
  METHODS
    method description->String
      return "ModReal($,$)" (%left,%right)

endClass

class MultiplyInt : Multiply
  METHODS
    method description->String
      return "MultiplyInt($,$)" (%left,%right)

endClass

class MultiplyReal : Multiply
  METHODS
    method description->String
      return "MultiplyReal($,$)" (%left,%right)

endClass

class PowerInt : Power
  METHODS
    method description->String
      return "PowerInt($,$)" (%left,%right)

endClass

class PowerReal : Power
  METHODS
    method description->String
      return "PowerReal($,$)" (%left,%right)

endClass

class While : ControlStructure
  PROPERTIES
    condition : Cmd

  METHODS
    method init( t, condition, statements )

    method init( existing:While )
      prior.init( existing )
      if (existing.condition) condition = existing.condition.cloned

    method description->String
      return "While($,$)" (%condition,%statements)

endClass

class InlineForEachIn : Cmd
  PROPERTIES
    collection     : Cmd
    starting_index : Cmd
    step_size      : Cmd

  METHODS
    method init( t, collection, starting_index, step_size )

    method init( existing:InlineForEachIn )
      prior.init( existing )
      if (existing.collection) collection = existing.collection.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "InlineForEachIn($,$,$)" (%collection,%starting_index,%step_size)

endClass

class InlineForEachOf : Cmd
  PROPERTIES
    collection     : Cmd
    starting_index : Cmd
    step_size      : Cmd

  METHODS
    method init( t, collection, starting_index, step_size )

    method init( existing:InlineForEachOf )
      prior.init( existing )
      if (existing.collection) collection = existing.collection.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "InlineForEachOf($,$,$)" (%collection,%starting_index,%step_size)

endClass

class ForEachAnonymous : ControlStructure
  PROPERTIES
    collection_name : Cmd
    collection      : Cmd
    starting_index  : Cmd
    step_size       : Cmd

  METHODS
    method init( t, collection_name, collection, starting_index, step_size, statements )

    method init( existing:ForEachAnonymous )
      prior.init( existing )
      if (existing.collection_name) collection_name = existing.collection_name.cloned
      if (existing.collection) collection = existing.collection.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "ForEachAnonymous($,$,$,$,$)" (%collection_name,%collection,%starting_index,%step_size,%statements)

endClass

class ForEachIn : ControlStructure
  PROPERTIES
    element_name    : Cmd
    index_name      : Cmd
    collection_name : Cmd
    collection      : Cmd
    starting_index  : Cmd
    step_size       : Cmd

  METHODS
    method init( t, element_name, index_name, collection_name, collection, starting_index, step_size, statements )

    method init( existing:ForEachIn )
      prior.init( existing )
      if (existing.element_name) element_name = existing.element_name.cloned
      if (existing.index_name) index_name = existing.index_name.cloned
      if (existing.collection_name) collection_name = existing.collection_name.cloned
      if (existing.collection) collection = existing.collection.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "ForEachIn($,$,$,$,$,$,$)" (%element_name,%index_name,%collection_name,%collection,%starting_index,%step_size,%statements)

endClass

class ForEachOf : ControlStructure
  PROPERTIES
    index_name      : Cmd
    collection_name : Cmd
    collection      : Cmd
    starting_index  : Cmd
    step_size       : Cmd

  METHODS
    method init( t, index_name, collection_name, collection, starting_index, step_size, statements )

    method init( existing:ForEachOf )
      prior.init( existing )
      if (existing.index_name) index_name = existing.index_name.cloned
      if (existing.collection_name) collection_name = existing.collection_name.cloned
      if (existing.collection) collection = existing.collection.cloned
      if (existing.starting_index) starting_index = existing.starting_index.cloned
      if (existing.step_size) step_size = existing.step_size.cloned

    method description->String
      return "ForEachOf($,$,$,$,$,$)" (%index_name,%collection_name,%collection,%starting_index,%step_size,%statements)

endClass

class ControlStructure : Cmd
  PROPERTIES
    locals     = [String:Local]
    statements : Statements

  METHODS
    method init( t, statements )

    method init( existing:ControlStructure )
      prior.init( existing )
      if (existing.statements) statements = existing.statements.cloned

    method add_local( t:Token, name:String, type:Type, proc:Procedure )->Local
      local v = Local( t, name, type )
      add_local( v, proc )
      return v

    method add_local( identifier:Cmd, type:Type, proc:Procedure )->Local
      local v = Local( identifier.t, identifier->String, type )
      add_local( v, proc )
      return v

    method add_local( v:Local, proc:Procedure )
      if (locals.contains(v.name))
        throw v.t.error( ''A local variable named "$" already exists in the current scope.''(v.name) )
      endIf
      v.index = proc.local_count
      ++proc.local_count
      locals[v.name] = v

    method description->String
      return "ControlStructure($)" (%statements)

endClass


class ForEachElementInRangeUpToInt : ControlStructure
  PROPERTIES
    element_info : Local
    start        : Cmd
    limit        : Cmd

  METHODS
    method init( t, element_info, start, limit, statements )

    method init( existing:ForEachElementInRangeUpToInt )
      prior.init( existing )
      if (existing.element_info) element_info = existing.element_info.cloned
      if (existing.start) start = existing.start.cloned
      if (existing.limit) limit = existing.limit.cloned

    method description->String
      return "ForEachElementInRangeUpToInt($,$,$,$)" (%element_info,%start,%limit,%statements)

endClass

class LogicalBinary : Binary
  METHODS
    method description->String
      return "LogicalBinary($,$)" (%left,%right)

endClass

class LogicalUnary : Unary
  METHODS
    method description->String
      return "LogicalUnary($)" (%operand)

endClass

class Else : Cmd
  PROPERTIES
    statements : Statements

  METHODS
    method init( t, statements )

    method init( existing:Else )
      prior.init( existing )
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "Else($)" (%statements)

endClass

class Class : Cmd
  PROPERTIES
    module_context         : Module
    name                   : Identifier
    constructor_properties : Parameters
    base_types             : TypeList
    attributes             : Attributes
    doc                    : String
    members                : Cmd

  METHODS
    method init( t, name, constructor_properties, base_types, attributes, doc, members )

    method init( existing:Class )
      prior.init( existing )
      module_context = existing.module_context
      if (existing.name) name = existing.name.cloned
      if (existing.constructor_properties) constructor_properties = existing.constructor_properties.cloned
      if (existing.base_types) base_types = existing.base_types.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      doc = existing.doc
      if (existing.members) members = existing.members.cloned

    method description->String
      return "Class($,$,$,$,$,$)" (%name,%constructor_properties,%base_types,%attributes,%doc,%members)

endClass


class ToTypeMethod : Cmd
  PROPERTIES
    to_type    : Type
    parameters : Parameters
    attributes : Attributes
    doc        : String
    statements : Statements

  METHODS
    method init( t, to_type, parameters, attributes, doc, statements )

    method init( existing:ToTypeMethod )
      prior.init( existing )
      if (existing.to_type) to_type = existing.to_type.cloned
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      doc = existing.doc
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "ToTypeMethod($,$,$,$,$)" (%to_type,%parameters,%attributes,%doc,%statements)

endClass

class Access : Cmd
  PROPERTIES
    name : String
    args : Args

  METHODS
    method init( t, name, args=null )

    method init( existing:Access )
      prior.init( existing )
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Access($,$)" (%name,%args)

endClass

class CallGlobalMethod : CallProcedure
  METHODS
    method description->String
      return "CallGlobalMethod($)" (%args)

endClass

class CallPriorMethod : Cmd
  PROPERTIES
    name : String
    args : Args

  METHODS
    method init( t, name, args )

    method init( existing:CallPriorMethod )
      prior.init( existing )
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CallPriorMethod($,$)" (%name,%args)

endClass

class CallProcedure : Cmd
  PROPERTIES
    info : Procedure
    args : Args

  METHODS
    method init( t, info, args )

    method init( existing:CallProcedure )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CallProcedure($)" (%args)

endClass

class Category : Cmd
  PROPERTIES
    name  : String
    args  : Args
    value : Cmd
    doc   : String

  METHODS
    method init( t, name, args, value, doc )

    method init( existing:Category )
      prior.init( existing )
      name = existing.name
      if (existing.args) args = existing.args.cloned
      if (existing.value) value = existing.value.cloned
      doc = existing.doc

    method description->String
      return "Category($,$,$,$)" (%name,%args,%value,%doc)

endClass

class ContextAccess : Cmd
  PROPERTIES
    context : Cmd
    name    : String
    args    : Args

  METHODS
    method init( t, context, name, args )

    method init( existing:ContextAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      name = existing.name
      if (existing.args) args = existing.args.cloned

    method description->String
      return "ContextAccess($,$,$)" (%context,%name,%args)

endClass

class ConvertToTypeWithArgs : Cmd
  PROPERTIES
    operand : Cmd
    to_type : Type
    args    : Args

  METHODS
    method init( t, operand, to_type, args )

    method init( existing:ConvertToTypeWithArgs )
      prior.init( existing )
      if (existing.operand) operand = existing.operand.cloned
      if (existing.to_type) to_type = existing.to_type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "ConvertToTypeWithArgs($,$,$)" (%operand,%to_type,%args)

endClass

class CreateCompound : Cmd
  PROPERTIES
    of_type : Type
    args    : Args

  METHODS
    method init( t, of_type, args )

    method init( existing:CreateCompound )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CreateCompound($,$)" (%of_type,%args)

endClass

class Ensure : Cmd
  PROPERTIES
    expression : Cmd
    args       : Args

  METHODS
    method init( t, expression, args )

    method init( existing:Ensure )
      prior.init( existing )
      if (existing.expression) expression = existing.expression.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Ensure($,$)" (%expression,%args)

endClass

class FormattedString : Cmd
  PROPERTIES
    format : String
    args   : Args

  METHODS
    method init( t, format, args )

    method init( existing:FormattedString )
      prior.init( existing )
      format = existing.format
      if (existing.args) args = existing.args.cloned

    method description->String
      return "FormattedString($,$)" (%format,%args)

endClass

class InvokeContext : Cmd
  PROPERTIES
    context : Cmd
    args    : Args

  METHODS
    method init( t, context, args )

    method init( existing:InvokeContext )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "InvokeContext($,$)" (%context,%args)

endClass

class ListIndexedAccess : Cmd
  PROPERTIES
    context : Cmd
    args    : Args

  METHODS
    method init( t, context, args )

    method init( existing:ListIndexedAccess )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "ListIndexedAccess($,$)" (%context,%args)

endClass

class New : Cmd
  PROPERTIES
    type_expression : Cmd
    args            : Args

  METHODS
    method init( t, type_expression, args )

    method init( existing:New )
      prior.init( existing )
      if (existing.type_expression) type_expression = existing.type_expression.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "New($,$)" (%type_expression,%args)

endClass

class TypeAccess : Cmd
  PROPERTIES
    of_type : Type
    args    : Args

  METHODS
    method init( t, of_type, args )

    method init( existing:TypeAccess )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "TypeAccess($,$)" (%of_type,%args)

endClass

class VariantList : Cmd
  PROPERTIES
    args : Args

  METHODS
    method init( t, args )

    method init( existing:VariantList )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "VariantList($)" (%args)

endClass

class WhichCase : Cmd
  PROPERTIES
    args       : Args
    statements : Statements

  METHODS
    method init( t, args, statements )

    method init( existing:WhichCase )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "WhichCase($,$)" (%args,%statements)

endClass

class Print : Cmd
  PROPERTIES
    args : Args

  METHODS
    method init( t, args )

    method init( existing:Print )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Print($)" (%args)

endClass

class Println : Cmd
  PROPERTIES
    args : Args

  METHODS
    method init( t, args )

    method init( existing:Println )
      prior.init( existing )
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Println($)" (%args)

endClass

class CallMethod : CallProcedure
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, args )

    method init( existing:CallMethod )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "CallMethod($,$,$)" (%context,%info,%args)

endClass

class CallThisMethod : CallProcedure
  METHODS
    method description->String
      return "CallThisMethod($,$)" (%info,%args)

endClass

class GlobalMethod : Procedure
  METHODS
    method init( t:Token, name:String, parameters:Parameters, return_type:Type, attributes:Attributes, doc:String, statements:Statements )
      prior.init( t, name, parameters, return_type, attributes, doc, statements )
      attributes.is_global = true

    method init( t:Token, name:String, parameters=null:Parameters, return_type=null:Type, statements=null:Statements )
      prior.init( t, name, parameters, return_type, statements )
      attributes.is_global = true

    method init( existing:GlobalMethod )
      prior.init( existing )

    method description->String
      return "GlobalMethod($,$,$,$,$,$)" (%name,%parameters,%return_type,%attributes,%doc,%statements)

    method to->String
      return signature

endClass

class Method : Procedure
  METHODS
    method init( t:Token, name:String, parameters:Parameters, return_type:Type, attributes:Attributes, doc:String, statements:Statements )
      prior.init( t, name, parameters, return_type, attributes, doc, statements )

    method init( t:Token, name:String, parameters=null:Parameters, return_type=null:Type, statements=null:Statements )
      prior.init( t, name, parameters, return_type, statements )

    method init( existing:Method )
      prior.init( existing )
endClass


class Construct : Cmd
  PROPERTIES
    type : Type
    args : Args

  METHODS
    method init( t, type, args )

    method init( existing:Construct )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "Construct($,$)" (%type,%args)

endClass

class CreateObject : Cmd
  PROPERTIES
    of_type : Type
    m_init  : Procedure
    args    : Args

  METHODS
    method init( t, of_type, m_init, args )

    method init( existing:CreateObject )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned
      if (existing.m_init) m_init = existing.m_init.cloned
      if (existing.args) args = existing.args.cloned

    method description->String
      return "CreateObject($,$,$)" (%of_type,%m_init,%args)

endClass

class CreateDefaultObject : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:CreateDefaultObject )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "CreateDefaultObject($)" (%of_type)

endClass

class ReturnResult : Cmd
  PROPERTIES
    result : Cmd

  METHODS
    method init( t, result )

    method init( existing:ReturnResult )
      prior.init( existing )
      if (existing.result) result = existing.result.cloned

    method description->String
      return "ReturnResult($)" (%result)

endClass

class ProgramElements : CmdList
  METHODS
    method description->String
      return "ProgramElements" + list_description

endClass

class Include : Cmd
  PROPERTIES
    filepath : String

  METHODS
    method init( t, filepath )

    method init( existing:Include )
      prior.init( existing )
      filepath = existing.filepath

    method description->String
      return "Include($)" (%filepath)

    method to->Character
      return Cmd.to_character(filepath)

    method to->Int:     return filepath
    method to->Logical: return filepath?
    method to->String: return filepath

endClass

class CallNativeMethod : Cmd
  PROPERTIES
    callback : Function()->Variant

  METHODS
    method init( t )

    method init( t, callback )

    method init( existing:CallNativeMethod )
      prior.init( existing )
      if (existing.callback) callback = existing.callback

    method description->String
      return "CallNativeMethod($)" (%callback)

endClass

class NativeParameter : Cmd
  PROPERTIES
    type          : Type
    default_value : Cmd

  METHODS
    method init( t, type, default_value )

    method init( existing:NativeParameter )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned
      if (existing.default_value) default_value = existing.default_value.cloned

    method description->String
      return "NativeParameter($,$)" (%type,%default_value)

endClass

class NativeParameters : CmdList
  METHODS
    method description->String
      return "NativeParameters" + list_description

    method get( index:Int )->NativeParameter
      return @list[index]->(as NativeParameter)
endClass


class NativeConstructorSignature : Cmd
  PROPERTIES
    scoped_type_name : String
    parameters       : NativeParameters

  METHODS
    method init( t, scoped_type_name, parameters )

    method init( existing:NativeConstructorSignature )
      prior.init( existing )
      scoped_type_name = existing.scoped_type_name
      if (existing.parameters) parameters = existing.parameters.cloned

    method description->String
      return "NativeConstructorSignature($,$)" (%scoped_type_name,%parameters)

endClass

class NativeMethodSignature : Cmd
  PROPERTIES
    scoped_type_name : String
    name             : String
    parameters       : NativeParameters
    return_type      : Type

  METHODS
    method init( t, scoped_type_name, name, parameters, return_type )

    method init( existing:NativeMethodSignature )
      prior.init( existing )
      scoped_type_name = existing.scoped_type_name
      name = existing.name
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.return_type) return_type = existing.return_type.cloned

    method description->String
      return "NativeMethodSignature($,$,$,$)" (%scoped_type_name,%name,%parameters,%return_type)

endClass

class NativeProcedureSignature : Cmd
  PROPERTIES
    scoped_type_name : String
    name             : String
    parameters       : NativeParameters
    return_type      : Type

  METHODS
    method init( t, scoped_type_name, name, parameters, return_type )

    method init( existing:NativeProcedureSignature )
      prior.init( existing )
      scoped_type_name = existing.scoped_type_name
      name = existing.name
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.return_type) return_type = existing.return_type.cloned

    method description->String
      return "NativeProcedureSignature($,$,$,$)" (%scoped_type_name,%name,%parameters,%return_type)

endClass

class ReadNativeSingleton : Cmd
  PROPERTIES
    of_type          : Type
    fn_get_singleton : Function()->Variant

  METHODS
    method init( t )
      noAction

    method init( t, of_type )
      fn_get_singleton = of_type.native_get_singleton

    method init( existing:ReadNativeSingleton )
      t = existing.t
      of_type = existing.of_type
      fn_get_singleton = existing.fn_get_singleton

    method description->String
      return "ReadNativeSingleton($)"(%of_type)
endClass

class DefaultConstructor : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:DefaultConstructor )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "DefaultConstructor($)" (%of_type)

endClass


class CreateDefaultList : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:CreateDefaultList )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "CreateDefaultList($)" (%of_type)

endClass

class CreateDefaultString : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:CreateDefaultString )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "CreateDefaultString($)" (%of_type)

endClass

class CreateDefaultTable : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:CreateDefaultTable )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "CreateDefaultTable($)" (%of_type)

endClass


class CreateDefaultVariant : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:CreateDefaultVariant )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "CreateDefaultVariant($)" (%of_type)

endClass


class This : Cmd
  PROPERTIES
    type : Type

  METHODS
    method init( t )

    method init( existing:This )
      prior.init( existing )
      if (existing.type) type = existing.type.cloned

    method description->String
      return "This($)" (%type)

endClass

class RoutineDef : Cmd
  PROPERTIES
    name        : String
    parameters  : Parameters
    return_type : Type
    attributes  : Attributes
    statements  : Statements

  METHODS
    method init( t, name, parameters, return_type, attributes, statements )

    method init( existing:RoutineDef )
      prior.init( existing )
      name = existing.name
      if (existing.parameters) parameters = existing.parameters.cloned
      if (existing.return_type) return_type = existing.return_type.cloned
      if (existing.attributes) attributes = existing.attributes.cloned
      if (existing.statements) statements = existing.statements.cloned

    method description->String
      return "RoutineDef($,$,$,$,$)" (%name,%parameters,%return_type,%attributes,%statements)

endClass

class Uses : Cmd
  PROPERTIES
    id_filepath : String
    attributes  : Attributes

  METHODS
    method init( t, id_filepath, attributes )

    method init( existing:Uses )
      prior.init( existing )
      id_filepath = existing.id_filepath
      if (existing.attributes) attributes = existing.attributes.cloned

    method description->String
      return "Uses($,$)" (%id_filepath,%attributes)

endClass

class AttributeNoInclude : Cmd
  METHODS
    method description->String
      return "AttributeNoInclude"
endClass

class PropertyList : CmdList
  METHODS
    method description->String
      return "PropertyList" + list_description

    method get( index:Int )->Property
      return @list[index]->(as Property)
endClass

class ReadSingleton : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:ReadSingleton )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "ReadSingleton($)" (%of_type)

endClass

class AttributeNative : Cmd
  METHODS
    method description->String
      return "AttributeNative"
endClass

class GetTypeInfo : Cmd
  PROPERTIES
    of_type : Type

  METHODS
    method init( t, of_type )

    method init( existing:GetTypeInfo )
      prior.init( existing )
      if (existing.of_type) of_type = existing.of_type.cloned

    method description->String
      return "GetTypeInfo($)" (%of_type)

endClass

class ReadProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:ReadProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "ReadProperty($,$)" (%context,%info)

endClass

class WriteProperty : Cmd
  PROPERTIES
    context   : Cmd
    info      : Property
    new_value : Cmd

  METHODS
    method init( t, context, info, new_value )

    method init( existing:WriteProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "WriteProperty($,$,$)" (%context,%info,%new_value)

endClass

class ReadGlobalProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:ReadGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "ReadGlobalProperty($)" (%info)

endClass

class ReadThisProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:ReadThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "ReadThisProperty($)" (%info)

endClass

class WriteGlobalProperty : Cmd
  PROPERTIES
    info      : Property
    new_value : Cmd

  METHODS
    method init( t, info, new_value )

    method init( existing:WriteGlobalProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "WriteGlobalProperty($,$)" (%info,%new_value)

endClass

class WriteThisProperty : Cmd
  PROPERTIES
    info      : Property
    new_value : Cmd

  METHODS
    method init( t, info, new_value )

    method init( existing:WriteThisProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      if (existing.new_value) new_value = existing.new_value.cloned

    method description->String
      return "WriteThisProperty($,$)" (%info,%new_value)

endClass

class ReadObjectProperty : Cmd
  PROPERTIES
    context : Cmd
    info    : Property

  METHODS
    method init( t, context, info )

    method init( existing:ReadObjectProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned
      if (existing.info) info = existing.info.cloned

    method description->String
      return "ReadObjectProperty($,$)" (%context,%info)

endClass

class ReadThisObjectProperty : Cmd
  PROPERTIES
    info : Property

  METHODS
    method init( t, info )

    method init( existing:ReadThisObjectProperty )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned

    method description->String
      return "ReadThisObjectProperty($)" (%info)

endClass

class WriteThisPropertyValue : Cmd
  PROPERTIES
    info  : Property
    value : Variant

  METHODS
    method init( t, info, value=undefined )

    method init( existing:WriteThisPropertyValue )
      prior.init( existing )
      if (existing.info) info = existing.info.cloned
      value = existing.value

    method description->String
      return "WriteThisPropertyValue($,$)" (%info,value)

endClass

class ConvertByteToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertByteToCharacter($)" (%operand)

endClass

class ConvertByteToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertByteToInt($)" (%operand)

endClass

class ConvertByteToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertByteToInt32($)" (%operand)

endClass

class ConvertByteToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertByteToInt64($)" (%operand)

endClass

class ConvertByteToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertByteToReal($)" (%operand)

endClass

class ConvertByteToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertByteToReal32($)" (%operand)

endClass

class ConvertByteToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertByteToReal64($)" (%operand)

endClass

class ConvertCharacterToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertCharacterToByte($)" (%operand)

endClass

class ConvertCharacterToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertCharacterToInt($)" (%operand)

endClass

class ConvertCharacterToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertCharacterToInt32($)" (%operand)

endClass

class ConvertCharacterToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertCharacterToInt64($)" (%operand)

endClass

class ConvertCharacterToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertCharacterToLogical($)" (%operand)

endClass

class ConvertCharacterToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertCharacterToReal($)" (%operand)

endClass

class ConvertCharacterToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertCharacterToReal32($)" (%operand)

endClass

class ConvertCharacterToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertCharacterToReal64($)" (%operand)

endClass

class ConvertInt32ToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertInt32ToByte($)" (%operand)

endClass

class ConvertInt32ToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertInt32ToCharacter($)" (%operand)

endClass

class ConvertInt32ToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertInt32ToInt($)" (%operand)

endClass

class ConvertInt32ToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertInt32ToInt64($)" (%operand)

endClass

class ConvertInt32ToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertInt32ToLogical($)" (%operand)

endClass

class ConvertInt32ToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertInt32ToReal($)" (%operand)

endClass

class ConvertInt32ToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertInt32ToReal32($)" (%operand)

endClass

class ConvertInt32ToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertInt32ToReal64($)" (%operand)

endClass

class ConvertInt64ToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertInt64ToByte($)" (%operand)

endClass

class ConvertInt64ToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertInt64ToCharacter($)" (%operand)

endClass

class ConvertInt64ToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertInt64ToInt($)" (%operand)

endClass

class ConvertInt64ToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertInt64ToInt32($)" (%operand)

endClass

class ConvertInt64ToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertInt64ToLogical($)" (%operand)

endClass

class ConvertInt64ToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertInt64ToReal($)" (%operand)

endClass

class ConvertInt64ToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertInt64ToReal32($)" (%operand)

endClass

class ConvertInt64ToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertInt64ToReal64($)" (%operand)

endClass

class ConvertIntToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertIntToByte($)" (%operand)

endClass

class ConvertIntToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertIntToCharacter($)" (%operand)

endClass

class ConvertIntToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertIntToInt32($)" (%operand)

endClass

class ConvertIntToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertIntToInt64($)" (%operand)

endClass

class ConvertIntToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertIntToLogical($)" (%operand)

endClass

class ConvertIntToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertIntToReal32($)" (%operand)

endClass

class ConvertIntToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertIntToReal64($)" (%operand)

endClass

class ConvertByteToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertByteToLogical($)" (%operand)

endClass

class ConvertLogicalToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertLogicalToByte($)" (%operand)

endClass

class ConvertLogicalToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertLogicalToCharacter($)" (%operand)

endClass

class ConvertLogicalToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertLogicalToInt($)" (%operand)

endClass

class ConvertLogicalToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertLogicalToInt32($)" (%operand)

endClass

class ConvertLogicalToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertLogicalToInt64($)" (%operand)

endClass

class ConvertLogicalToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertLogicalToReal($)" (%operand)

endClass

class ConvertLogicalToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertLogicalToReal32($)" (%operand)

endClass

class ConvertLogicalToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertLogicalToReal64($)" (%operand)

endClass

class ConvertReal32ToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertReal32ToByte($)" (%operand)

endClass

class ConvertReal32ToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertReal32ToCharacter($)" (%operand)

endClass

class ConvertReal32ToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertReal32ToInt($)" (%operand)

endClass

class ConvertReal32ToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertReal32ToInt32($)" (%operand)

endClass

class ConvertReal32ToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertReal32ToInt64($)" (%operand)

endClass

class ConvertReal32ToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertReal32ToLogical($)" (%operand)

endClass

class ConvertReal32ToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertReal32ToReal($)" (%operand)

endClass

class ConvertReal32ToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertReal32ToReal64($)" (%operand)

endClass

class ConvertReal64ToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertReal64ToByte($)" (%operand)

endClass

class ConvertReal64ToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertReal64ToCharacter($)" (%operand)

endClass

class ConvertReal64ToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertReal64ToInt($)" (%operand)

endClass

class ConvertReal64ToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertReal64ToInt32($)" (%operand)

endClass

class ConvertReal64ToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertReal64ToInt64($)" (%operand)

endClass

class ConvertReal64ToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertReal64ToLogical($)" (%operand)

endClass

class ConvertReal64ToReal : ConvertToReal
  METHODS
    method description->String
      return "ConvertReal64ToReal($)" (%operand)

endClass

class ConvertReal64ToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertReal64ToReal32($)" (%operand)

endClass

class ConvertRealToByte : ConvertToByte
  METHODS
    method description->String
      return "ConvertRealToByte($)" (%operand)

endClass

class ConvertRealToCharacter : ConvertToCharacter
  METHODS
    method description->String
      return "ConvertRealToCharacter($)" (%operand)

endClass

class ConvertRealToInt : ConvertToInt
  METHODS
    method description->String
      return "ConvertRealToInt($)" (%operand)

endClass

class ConvertRealToInt32 : ConvertToInt32
  METHODS
    method description->String
      return "ConvertRealToInt32($)" (%operand)

endClass

class ConvertRealToInt64 : ConvertToInt64
  METHODS
    method description->String
      return "ConvertRealToInt64($)" (%operand)

endClass

class ConvertRealToLogical : ConvertToLogical
  METHODS
    method description->String
      return "ConvertRealToLogical($)" (%operand)

endClass

class ConvertRealToReal32 : ConvertToReal32
  METHODS
    method description->String
      return "ConvertRealToReal32($)" (%operand)

endClass

class ConvertRealToReal64 : ConvertToReal64
  METHODS
    method description->String
      return "ConvertRealToReal64($)" (%operand)

endClass

class LiteralByte : Cmd
  PROPERTIES
    value : Byte

  METHODS
    method init( t, value )

    method init( existing:LiteralByte )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralByte($)" (%value)

    method to->Int:       return value
    method to->String:    return value

endClass

class LiteralInt32 : Cmd
  PROPERTIES
    value : Int32

  METHODS
    method init( t, value )

    method init( existing:LiteralInt32 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt32($)" (%value)

    method to->Int:       return value
    method to->String:    return value

endClass

class LiteralInt64 : Cmd
  PROPERTIES
    value : Int64

  METHODS
    method init( t, value )

    method init( existing:LiteralInt64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralInt64($)" (%value)

    method to->Int:       return value
    method to->String:    return value

endClass

class LiteralReal32 : Cmd
  PROPERTIES
    value : Real32

  METHODS
    method init( t, value )

    method init( existing:LiteralReal32 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal32($)" (%value)

    method to->Int:    return value
    method to->Real:   return value
    method to->String: return value

endClass

class LiteralReal64 : Cmd
  PROPERTIES
    value : Real64

  METHODS
    method init( t, value )

    method init( existing:LiteralReal64 )
      prior.init( existing )
      value = existing.value

    method description->String
      return "LiteralReal64($)" (%value)

    method to->Int:    return value
    method to->Real:   return value
    method to->String: return value

endClass

class AddByte : Add
  METHODS
    method description->String
      return "AddByte($,$)" (%left,%right)

endClass

class AddCharacter : Add
  METHODS
    method description->String
      return "AddCharacter($,$)" (%left,%right)

endClass

class AddInt32 : Add
  METHODS
    method description->String
      return "AddInt32($,$)" (%left,%right)

endClass

class AddInt64 : Add
  METHODS
    method description->String
      return "AddInt64($,$)" (%left,%right)

endClass

class AddLogical : Add
  METHODS
    method description->String
      return "AddLogical($,$)" (%left,%right)

endClass

class AddReal32 : Add
  METHODS
    method description->String
      return "AddReal32($,$)" (%left,%right)

endClass

class AddReal64 : Add
  METHODS
    method description->String
      return "AddReal64($,$)" (%left,%right)

endClass

class DivideByte : Divide
  METHODS
    method description->String
      return "DivideByte($,$)" (%left,%right)

endClass

class DivideCharacter : Divide
  METHODS
    method description->String
      return "DivideCharacter($,$)" (%left,%right)

endClass

class DivideInt32 : Divide
  METHODS
    method description->String
      return "DivideInt32($,$)" (%left,%right)

endClass

class DivideInt64 : Divide
  METHODS
    method description->String
      return "DivideInt64($,$)" (%left,%right)

endClass

class DivideLogical : Divide
  METHODS
    method description->String
      return "DivideLogical($,$)" (%left,%right)

endClass

class DivideReal32 : Divide
  METHODS
    method description->String
      return "DivideReal32($,$)" (%left,%right)

endClass

class DivideReal64 : Divide
  METHODS
    method description->String
      return "DivideReal64($,$)" (%left,%right)

endClass

class ModByte : Mod
  METHODS
    method description->String
      return "ModByte($,$)" (%left,%right)

endClass

class ModCharacter : Mod
  METHODS
    method description->String
      return "ModCharacter($,$)" (%left,%right)

endClass

class ModInt32 : Mod
  METHODS
    method description->String
      return "ModInt32($,$)" (%left,%right)

endClass

class ModInt64 : Mod
  METHODS
    method description->String
      return "ModInt64($,$)" (%left,%right)

endClass

class ModLogical : Mod
  METHODS
    method description->String
      return "ModLogical($,$)" (%left,%right)

endClass

class ModReal32 : Mod
  METHODS
    method description->String
      return "ModReal32($,$)" (%left,%right)

endClass

class ModReal64 : Mod
  METHODS
    method description->String
      return "ModReal64($,$)" (%left,%right)

endClass

class MultiplyByte : Multiply
  METHODS
    method description->String
      return "MultiplyByte($,$)" (%left,%right)

endClass

class MultiplyCharacter : Multiply
  METHODS
    method description->String
      return "MultiplyCharacter($,$)" (%left,%right)

endClass

class MultiplyInt32 : Multiply
  METHODS
    method description->String
      return "MultiplyInt32($,$)" (%left,%right)

endClass

class MultiplyInt64 : Multiply
  METHODS
    method description->String
      return "MultiplyInt64($,$)" (%left,%right)

endClass

class MultiplyLogical : Multiply
  METHODS
    method description->String
      return "MultiplyLogical($,$)" (%left,%right)

endClass

class MultiplyReal32 : Multiply
  METHODS
    method description->String
      return "MultiplyReal32($,$)" (%left,%right)

endClass

class MultiplyReal64 : Multiply
  METHODS
    method description->String
      return "MultiplyReal64($,$)" (%left,%right)

endClass

class SubtractByte : Subtract
  METHODS
    method description->String
      return "SubtractByte($,$)" (%left,%right)

endClass

class SubtractCharacter : Subtract
  METHODS
    method description->String
      return "SubtractCharacter($,$)" (%left,%right)

endClass

class SubtractInt32 : Subtract
  METHODS
    method description->String
      return "SubtractInt32($,$)" (%left,%right)

endClass

class SubtractInt64 : Subtract
  METHODS
    method description->String
      return "SubtractInt64($,$)" (%left,%right)

endClass

class SubtractLogical : Subtract
  METHODS
    method description->String
      return "SubtractLogical($,$)" (%left,%right)

endClass

class SubtractReal32 : Subtract
  METHODS
    method description->String
      return "SubtractReal32($,$)" (%left,%right)

endClass

class SubtractReal64 : Subtract
  METHODS
    method description->String
      return "SubtractReal64($,$)" (%left,%right)

endClass

class PowerByte : Power
  METHODS
    method description->String
      return "PowerByte($,$)" (%left,%right)

endClass

class PowerCharacter : Power
  METHODS
    method description->String
      return "PowerCharacter($,$)" (%left,%right)

endClass

class PowerInt32 : Power
  METHODS
    method description->String
      return "PowerInt32($,$)" (%left,%right)

endClass

class PowerInt64 : Power
  METHODS
    method description->String
      return "PowerInt64($,$)" (%left,%right)

endClass

class PowerLogical : Power
  METHODS
    method description->String
      return "PowerLogical($,$)" (%left,%right)

endClass

class PowerReal32 : Power
  METHODS
    method description->String
      return "PowerReal32($,$)" (%left,%right)

endClass

class PowerReal64 : Power
  METHODS
    method description->String
      return "PowerReal64($,$)" (%left,%right)

endClass

class BitShiftLeftByte : BitShiftLeft
  METHODS
    method description->String
      return "BitShiftLeftByte($,$)" (%left,%right)

endClass

class BitShiftLeftCharacter : BitShiftLeft
  METHODS
    method description->String
      return "BitShiftLeftCharacter($,$)" (%left,%right)

endClass

class BitShiftLeftInt : BitShiftLeft
  METHODS
    method description->String
      return "BitShiftLeftInt($,$)" (%left,%right)

endClass

class BitShiftLeftInt32 : BitShiftLeft
  METHODS
    method description->String
      return "BitShiftLeftInt32($,$)" (%left,%right)

endClass

class BitShiftLeftInt64 : BitShiftLeft
  METHODS
    method description->String
      return "BitShiftLeftInt64($,$)" (%left,%right)

endClass

class BitShiftRightByte : BitShiftRight
  METHODS
    method description->String
      return "BitShiftRightByte($,$)" (%left,%right)

endClass

class BitShiftRightCharacter : BitShiftRight
  METHODS
    method description->String
      return "BitShiftRightCharacter($,$)" (%left,%right)

endClass

class BitShiftRightInt : BitShiftRight
  METHODS
    method description->String
      return "BitShiftRightInt($,$)" (%left,%right)

endClass

class BitShiftRightInt32 : BitShiftRight
  METHODS
    method description->String
      return "BitShiftRightInt32($,$)" (%left,%right)

endClass

class BitShiftRightInt64 : BitShiftRight
  METHODS
    method description->String
      return "BitShiftRightInt64($,$)" (%left,%right)

endClass

class BitShiftRightXByte : BitShiftRightX
  METHODS
    method description->String
      return "BitShiftRightXByte($,$)" (%left,%right)

endClass

class BitShiftRightXCharacter : BitShiftRightX
  METHODS
    method description->String
      return "BitShiftRightXCharacter($,$)" (%left,%right)

endClass

class BitShiftRightXInt : BitShiftRightX
  METHODS
    method description->String
      return "BitShiftRightXInt($,$)" (%left,%right)

endClass

class BitShiftRightXInt32 : BitShiftRightX
  METHODS
    method description->String
      return "BitShiftRightXInt32($,$)" (%left,%right)

endClass

class BitShiftRightXInt64 : BitShiftRightX
  METHODS
    method description->String
      return "BitShiftRightXInt64($,$)" (%left,%right)

endClass

class BitwiseAndByte : BitwiseAnd
  METHODS
    method description->String
      return "BitwiseAndByte($,$)" (%left,%right)

endClass

class BitwiseAndCharacter : BitwiseAnd
  METHODS
    method description->String
      return "BitwiseAndCharacter($,$)" (%left,%right)

endClass

class BitwiseAndInt : BitwiseAnd
  METHODS
    method description->String
      return "BitwiseAndInt($,$)" (%left,%right)

endClass

class BitwiseAndInt32 : BitwiseAnd
  METHODS
    method description->String
      return "BitwiseAndInt32($,$)" (%left,%right)

endClass

class BitwiseAndInt64 : BitwiseAnd
  METHODS
    method description->String
      return "BitwiseAndInt64($,$)" (%left,%right)

endClass

class BitwiseAndLogical : BitwiseAnd
  METHODS
    method description->String
      return "BitwiseAndLogical($,$)" (%left,%right)

endClass

class BitwiseOrByte : BitwiseOr
  METHODS
    method description->String
      return "BitwiseOrByte($,$)" (%left,%right)

endClass

class BitwiseOrCharacter : BitwiseOr
  METHODS
    method description->String
      return "BitwiseOrCharacter($,$)" (%left,%right)

endClass

class BitwiseOrInt : BitwiseOr
  METHODS
    method description->String
      return "BitwiseOrInt($,$)" (%left,%right)

endClass

class BitwiseOrInt32 : BitwiseOr
  METHODS
    method description->String
      return "BitwiseOrInt32($,$)" (%left,%right)

endClass

class BitwiseOrInt64 : BitwiseOr
  METHODS
    method description->String
      return "BitwiseOrInt64($,$)" (%left,%right)

endClass

class BitwiseXorByte : BitwiseXor
  METHODS
    method description->String
      return "BitwiseXorByte($,$)" (%left,%right)

endClass

class BitwiseXorCharacter : BitwiseXor
  METHODS
    method description->String
      return "BitwiseXorCharacter($,$)" (%left,%right)

endClass

class BitwiseXorInt : BitwiseXor
  METHODS
    method description->String
      return "BitwiseXorInt($,$)" (%left,%right)

endClass

class BitwiseXorInt32 : BitwiseXor
  METHODS
    method description->String
      return "BitwiseXorInt32($,$)" (%left,%right)

endClass

class BitwiseXorInt64 : BitwiseXor
  METHODS
    method description->String
      return "BitwiseXorInt64($,$)" (%left,%right)

endClass

class CompareEQByte : CompareEQ
  METHODS
    method description->String
      return "CompareEQByte($,$)" (%left,%right)

endClass

class CompareEQCharacter : CompareEQ
  METHODS
    method description->String
      return "CompareEQCharacter($,$)" (%left,%right)

endClass

class CompareEQInt32 : CompareEQ
  METHODS
    method description->String
      return "CompareEQInt32($,$)" (%left,%right)

endClass

class CompareEQInt64 : CompareEQ
  METHODS
    method description->String
      return "CompareEQInt64($,$)" (%left,%right)

endClass

class CompareEQLogical : CompareEQ
  METHODS
    method description->String
      return "CompareEQLogical($,$)" (%left,%right)

endClass

class CompareEQReal32 : CompareEQ
  METHODS
    method description->String
      return "CompareEQReal32($,$)" (%left,%right)

endClass

class CompareEQReal64 : CompareEQ
  METHODS
    method description->String
      return "CompareEQReal64($,$)" (%left,%right)

endClass

class CompareGEByte : CompareGE
  METHODS
    method description->String
      return "CompareGEByte($,$)" (%left,%right)

endClass

class CompareGECharacter : CompareGE
  METHODS
    method description->String
      return "CompareGECharacter($,$)" (%left,%right)

endClass

class CompareGEInt32 : CompareGE
  METHODS
    method description->String
      return "CompareGEInt32($,$)" (%left,%right)

endClass

class CompareGEInt64 : CompareGE
  METHODS
    method description->String
      return "CompareGEInt64($,$)" (%left,%right)

endClass

class CompareGELogical : CompareGE
  METHODS
    method description->String
      return "CompareGELogical($,$)" (%left,%right)

endClass

class CompareGEReal32 : CompareGE
  METHODS
    method description->String
      return "CompareGEReal32($,$)" (%left,%right)

endClass

class CompareGEReal64 : CompareGE
  METHODS
    method description->String
      return "CompareGEReal64($,$)" (%left,%right)

endClass

class CompareGTByte : CompareGT
  METHODS
    method description->String
      return "CompareGTByte($,$)" (%left,%right)

endClass

class CompareGTCharacter : CompareGT
  METHODS
    method description->String
      return "CompareGTCharacter($,$)" (%left,%right)

endClass

class CompareGTInt32 : CompareGT
  METHODS
    method description->String
      return "CompareGTInt32($,$)" (%left,%right)

endClass

class CompareGTInt64 : CompareGT
  METHODS
    method description->String
      return "CompareGTInt64($,$)" (%left,%right)

endClass

class CompareGTLogical : CompareGT
  METHODS
    method description->String
      return "CompareGTLogical($,$)" (%left,%right)

endClass

class CompareGTReal32 : CompareGT
  METHODS
    method description->String
      return "CompareGTReal32($,$)" (%left,%right)

endClass

class CompareGTReal64 : CompareGT
  METHODS
    method description->String
      return "CompareGTReal64($,$)" (%left,%right)

endClass

class CompareLEByte : CompareLE
  METHODS
    method description->String
      return "CompareLEByte($,$)" (%left,%right)

endClass

class CompareLECharacter : CompareLE
  METHODS
    method description->String
      return "CompareLECharacter($,$)" (%left,%right)

endClass

class CompareLEInt32 : CompareLE
  METHODS
    method description->String
      return "CompareLEInt32($,$)" (%left,%right)

endClass

class CompareLEInt64 : CompareLE
  METHODS
    method description->String
      return "CompareLEInt64($,$)" (%left,%right)

endClass

class CompareLELogical : CompareLE
  METHODS
    method description->String
      return "CompareLELogical($,$)" (%left,%right)

endClass

class CompareLEReal32 : CompareLE
  METHODS
    method description->String
      return "CompareLEReal32($,$)" (%left,%right)

endClass

class CompareLEReal64 : CompareLE
  METHODS
    method description->String
      return "CompareLEReal64($,$)" (%left,%right)

endClass

class CompareLTByte : CompareLT
  METHODS
    method description->String
      return "CompareLTByte($,$)" (%left,%right)

endClass

class CompareLTCharacter : CompareLT
  METHODS
    method description->String
      return "CompareLTCharacter($,$)" (%left,%right)

endClass

class CompareLTInt32 : CompareLT
  METHODS
    method description->String
      return "CompareLTInt32($,$)" (%left,%right)

endClass

class CompareLTInt64 : CompareLT
  METHODS
    method description->String
      return "CompareLTInt64($,$)" (%left,%right)

endClass

class CompareLTLogical : CompareLT
  METHODS
    method description->String
      return "CompareLTLogical($,$)" (%left,%right)

endClass

class CompareLTReal32 : CompareLT
  METHODS
    method description->String
      return "CompareLTReal32($,$)" (%left,%right)

endClass

class CompareLTReal64 : CompareLT
  METHODS
    method description->String
      return "CompareLTReal64($,$)" (%left,%right)

endClass

class CompareNEByte : CompareNE
  METHODS
    method description->String
      return "CompareNEByte($,$)" (%left,%right)

endClass

class CompareNECharacter : CompareNE
  METHODS
    method description->String
      return "CompareNECharacter($,$)" (%left,%right)

endClass

class CompareNEInt32 : CompareNE
  METHODS
    method description->String
      return "CompareNEInt32($,$)" (%left,%right)

endClass

class CompareNEInt64 : CompareNE
  METHODS
    method description->String
      return "CompareNEInt64($,$)" (%left,%right)

endClass

class CompareNELogical : CompareNE
  METHODS
    method description->String
      return "CompareNELogical($,$)" (%left,%right)

endClass

class CompareNEReal32 : CompareNE
  METHODS
    method description->String
      return "CompareNEReal32($,$)" (%left,%right)

endClass

class CompareNEReal64 : CompareNE
  METHODS
    method description->String
      return "CompareNEReal64($,$)" (%left,%right)

endClass


class AddAndAssignGlobalProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignGlobalProperty($,$)" (%info,%operand)

endClass

class AddAndAssignLocal : OpAndAssignLocal
  METHODS
    method description->String
      return "AddAndAssignLocal($,$)" (%info,%operand)

endClass

class AddAndAssignProperty : OpAndAssignProperty
  PROPERTIES
    context : Cmd

  METHODS
    method init( t, context, info, operand )

    method init( existing:AddAndAssignProperty )
      prior.init( existing )
      if (existing.context) context = existing.context.cloned

    method description->String
      return "AddAndAssignProperty($,$,$)" (%context,%info,%operand)

endClass

class AddAndAssignThisProperty : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisProperty($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyInt64 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyInt64($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyByte : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyByte($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyCharacter : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyCharacter($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyInt : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyInt($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyInt32 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyInt32($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyInt64 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyInt64($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyLogical : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyLogical($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyReal : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyReal($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyReal32 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyReal32($,$)" (%info,%operand)

endClass

class AddAndAssignPropertyReal64 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignPropertyReal64($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyByte : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyByte($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyCharacter : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyCharacter($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyInt : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyInt($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyInt32 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyInt32($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyLogical : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyLogical($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyReal : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyReal($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyReal32 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyReal32($,$)" (%info,%operand)

endClass

class AddAndAssignThisPropertyReal64 : OpAndAssignProperty
  METHODS
    method description->String
      return "AddAndAssignThisPropertyReal64($,$)" (%info,%operand)

endClass

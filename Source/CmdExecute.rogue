module Boss

class BossException : Exception
  METHODS
    method save_stack_trace
      noAction
endClass

class ReturnResultException( result:Variant ) : BossException [singleton]
  METHODS
    method to->String
      return result->String
endClass

augment
  METHODS
    method Cmd.execute->Variant
      println this
      throw t.error( "[TODO] $.execute"(type_name) )

    method CallGlobalMethod.execute->Variant
      if (args and args.count)
        local old_stack_count = Runtime.stack.count
        Runtime.stack.add( (forEach in args).execute )
        local result = info.execute
        Runtime.stack.discard_from( old_stack_count )
        return result
      else
        return info.execute
      endIf

    method CallMethod.execute->Variant
      local context = context.execute
      which (context.type)
        case Variant.TYPE_NULL, Variant.TYPE_UNDEFINED:
          throw t.error( "Runtime call context is null or undefined." )
      endWhich

      local old_stack_count = Runtime.stack.count
      Runtime.stack.add( context )

      if (args and args.count) Runtime.stack.add( (forEach in args).execute )

      local result = info.execute
      Runtime.stack.discard_from( old_stack_count )
      return result

    method CreateDefaultObject.execute->Variant
      return Object( of_type )

    method Else.execute->Variant
      return statements.execute

    method ForEachElementInRangeUpToInt.execute->Variant
      local v_index = Runtime.fp + element_info.index
      localize statements
      forEach (i in start.execute->Int..limit.execute->Int)
        Runtime.stack[ v_index ] = i
        statements.execute
      endForEach
      return undefined

    method IntToReal.execute->Variant
      return operand.execute.integer->Real

    method If.execute->Variant
      if (condition.execute?)
        return statements.execute
      elseIf (cmd_else)
        return cmd_else.execute
      else
        return false
      endIf

    method LiteralInt.execute->Variant
      return value

    method LiteralLogical.execute->Variant
      return value

    method LiteralReal.execute->Variant
      return value

    method LiteralString.execute->Variant
      return value

    method LogicalNot.execute->Variant
      return not operand.execute?

    method Println.execute->Variant
      forEach (arg in args)
        println arg.execute
      endForEach

    method Procedure.execute->Variant
      local old_stack_count = Runtime.stack.count
      temporarily Runtime.fp = old_stack_count - this.param_count
        try
          Runtime.stack.expand( this.local_count )
          local result = statements.execute
          Runtime.stack.discard_from( old_stack_count )
          return result
        catch (on_return_result:ReturnResultException)
          return on_return_result.result
        endTry
      endTemporarily

    method ReturnResult.execute->Variant
      local exception = ReturnResultException
      exception.result = result.execute
      throw exception

    method ReadLocal.execute->Variant
      return Runtime.stack[ Runtime.fp+info.index ]

    method ReadLocalInt.execute->Variant
      return Runtime.stack[ Runtime.fp+info.index ]

    method Statements.execute->Variant
      local result : Variant
      forEach (statement in this)
        result = statement.execute
      endForEach
      return result

    method While.execute->Variant
      localize condition
      localize statements
      local result = Variant()
      while (condition.execute?)
        result = statements.execute
      endWhile
      return result

    method WriteLocal.execute->Variant
      local new_value = new_value.execute
      Runtime.stack[ Runtime.fp+info.index ] = new_value
      return new_value

endAugment

module Boss

augment
  METHODS
    method Cmd.execute->Variant
      println this
      throw t.error( "[TODO] $.execute"(type_name) )

    method CallGlobalMethod.execute->Variant
      if (args and args.count)
        local old_stack_count = Program.stack.count
        Program.stack.add( (forEach in args).execute )
        local result = info.execute
        Program.stack.discard_from( old_stack_count )
        return result
      else
        return info.execute
      endIf

    method Else.execute->Variant
      return statements.execute

    method ForEachElementInRangeUpToInt.execute->Variant
      local v_index = Program.sp + element_info.index
      localize statements
      forEach (i in start.execute->Int..limit.execute->Int)
        Program.stack[ v_index ] = i
        statements.execute
      endForEach
      return undefined

    method IntToReal.execute->Variant
      return operand.execute.integer->Real

    method If.execute->Variant
      if (condition.execute?)
        return statements.execute
      elseIf (cmd_else)
        return cmd_else.execute
      else
        return false
      endIf

    method LiteralInt.execute->Variant
      return value

    method LiteralLogical.execute->Variant
      return value

    method LiteralReal.execute->Variant
      return value

    method LiteralString.execute->Variant
      return value

    method LogicalNot.execute->Variant
      return not operand.execute?

    method Println.execute->Variant
      forEach (arg in args)
        println arg.execute
      endForEach

    method GlobalMethod.execute->Variant
      local old_stack_count = Program.stack.count
      temporarily Program.sp = old_stack_count - this.param_count
        Program.stack.expand( this.local_count )
        local result = statements.execute
        Program.stack.discard_from( old_stack_count )
        return result
      endTemporarily

    method ReadLocal.execute->Variant
      return Program.stack[ Program.sp+info.index ]

    method ReadLocalInt.execute->Variant
      return Program.stack[ Program.sp+info.index ]

    method Statements.execute->Variant
      local result : Variant
      forEach (statement in this)
        result = statement.execute
      endForEach
      return result

    method While.execute->Variant
      localize condition
      localize statements
      local result = Variant()
      while (condition.execute?)
        result = statements.execute
      endWhile
      return result

    method WriteLocal.execute->Variant
      local new_value = new_value.execute
      Program.stack[ Program.sp+info.index ] = new_value
      return new_value

endAugment

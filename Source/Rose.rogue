module RogueScript

uses Console/CommandLineParser

$include RogueScript
$include RogueScript/NativeLibraries

class Pet [abstract]
  METHODS
    method speak [api]
      println "???"
endClass

class Cat : Pet [api]
  METHODS
    method speak [override]
      println "Meow"
endClass

class RogueScriptPet : Pet, RogueScriptAdapted [api]
  METHODS
    method .configure_native_overrides
      VM.configure_native_method_override( this, 0, "speak()" )

    method speak [override]
      if local m = rs_type.native_method_overrides[0]
        m( this )
      else
        prior.speak
      endIf
endClass

RogueScript( System.command_line_arguments )

class RogueScript
  PROPERTIES
    command  : Variant

  METHODS
    method init( args:String[] )
      command = _parse_args( args )

      # trace command
      # has //options and possibly //args

      if (command//options//help or command//args.count == 0)
        _print_usage
        System.exit 0
      endIf

      try
        local vm = VM
        NativeLibraries.register( vm )
        vm.register_native_type( <<Pet>>, NativeTypeInfo(&create_extended_object=(rs_type) => RogueScriptPet(rs_type)) )
        vm.register_native_type( <<Cat>> )

        vm.include( "Source/Libraries" )

        vm.load(
          File("Internal Configuration"),
          @|uses Geometry
        )

        forEach (arg in command//args)
          vm.include( File(arg->String) )
        endForEach

        vm.update

        if local type_buffy = vm.find_type( "Buffy" )
          local pet = vm.create_object( type_buffy ).to<<RogueScript::Pet>>
          if (pet) pet.speak
          pet = vm.create_object( type_buffy ).to<<RogueScript::Pet>>
          if (pet) pet.speak
        endIf

      catch (error:RogueScriptError)
        Global.error.println error
        System.exit 1

      catch (error:Exception)
        Global.error.print   "[INTERNAL ERROR] "
        Global.error.println error
        System.exit 1

      endTry

    method _parse_args( args:String[] )->Variant
      # This method is unrelated to the Froley Parser
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method _print_usage
      println @|USAGE
               |  rogueScript [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass

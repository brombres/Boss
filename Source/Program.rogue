module Boss

class TokenizedFile( filepath:String, tokens:Token[], is_api:Logical ) [compound];

class Program [singleton]
  PROPERTIES
    parsed_file_timestamps = [String:Timestamp]
    tokenized_files        = TokenizedFile[]

    t              : Token
    current_module : Module
    default_module : Module
    modules        = [String:Module]

    type_Int       : Type
    type_Logical   : Type
    type_Real      : Type
    type_String    : Type

    configured     : Logical

    stack   = Variant[]
    sp      : Int

  METHODS
    method init
      Program = this

    method configure
      t = Token( TokenType.IDENTIFIER, "[INTERNAL]", &content="Boss" )
      default_module = Module( t, "Boss" )
      current_module = default_module

      type_Int     = Type( t, "Int" )
      type_Logical = Type( t, "Logical" )
      type_Real    = Type( t, "Real" )
      type_String  = Type( t, "String" )

    method execute( cmd:Cmd )
      temporarily Program = this
        cmd.execute
      endTemporarily

    method launch->CompileError
      try
        local err = resolve
        if (err) return err

        forEach (mod in modules)
          mod.launch
        endForEach

        return null

      catch (err:CompileError)
        return err
      catch (err:Error)
        return CompileError( "[INTERNAL ERROR] " + err )
      endTry

    method parse( file:File )->CompileError
      temporarily Program = this
        file .= abs

        local timestamp = file.timestamp
        local entry = parsed_file_timestamps.find( file.filepath )
        if (entry and entry.value >= timestamp) return null

        local err = parse( file.filepath, String(file) )
        if (err) return err

        parsed_file_timestamps[ file.filepath ] = timestamp
        return null
      endTemporarily

    method parse( filepath:String, source:String, timestamp=Timestamp():Timestamp )->CompileError
      if (not configured) configure

      try
        local is_api = false

        local tokens = Scanner( File(filepath) ).tokenize
        tokenized_files.add( TokenizedFile(filepath,tokens,is_api) )

        Parser(tokens).[collecting_types=true,disable_output=1].parse

      catch (err:CompileError)
        return err
      catch (err:Exception)
        return CompileError( "[INTERNAL ERROR] " + err, filepath )
      endTry

      return null

    method resolve->CompileError
      try
        while (tokenized_files.count)
          local files = tokenized_files.cloned
          tokenized_files.clear
          forEach (file in files)
            local is_api = false

            local parser = Parser( File(file.filepath) )

            temporarily Program=this, current_module=default_module
              local elements = parser.parse
              (forEach in elements).store
            endTemporarily
          endForEach
        endWhile

        (forEach in modules).resolve

      catch (err:CompileError)
        return err
      catch (err:Exception)
        return CompileError( "[INTERNAL ERROR] " + err )
      endTry

      return null
endClass

module Boss

class Program [singleton]
  PROPERTIES
    t              : Token
    default_module : Module
    current_module : Module
    modules        = [String:Module]
    types          = [String:Type]  # All types, fully qualified e.g. Boss::Int

    type_Int       : Type
    type_Logical   : Type
    type_Real      : Type
    type_String    : Type

    pending_elements = ProgramElements[]

  METHODS
    method init( elements:ProgramElements[] )
      _configure
      add( elements )

    method add( elements:ProgramElements[] )
      pending_elements.add( elements )

    method execute( cmd:Cmd )
      temporarily Program = this
        cmd.execute
      endTemporarily

    method get_module( t:Token, module_name:String )->Module
      local mod = modules[module_name]
      if (not mod)
        mod = Module( t, module_name )
        modules[module_name] = mod
      endIf
      return mod

    method launch
      temporarily Program = this
        forEach (mod in modules)
          mod.launch
        endForEach
      endTemporarily

    method organize
      temporarily Program=this, current_module=default_module
        CollectTypes.visit( forEach in pending_elements )

        forEach (elements in pending_elements)
          (forEach in elements.cloned).store
        endForEach

        (forEach in modules).organize

        Organizer.organize_program

        pending_elements.clear
      endTemporarily

    method resolve
      temporarily Program = this
        Resolver.resolve_program
      endTemporarily

    method _configure
      temporarily Program = this
        t = Token( TokenType.IDENTIFIER, "[INTERNAL]", &content="Boss" )
        default_module = Module( t, "Boss" )

        type_Int     = default_module.define_type( t, "Int",     Attribute.PRIMITIVE )
        type_Logical = default_module.define_type( t, "Logical", Attribute.PRIMITIVE )
        type_Real    = default_module.define_type( t, "Real",    Attribute.PRIMITIVE )
        type_String  = default_module.define_type( t, "String",  Attribute.PRIMITIVE )
      endTemporarily

endClass

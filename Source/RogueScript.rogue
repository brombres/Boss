module RogueScript

uses Console/CommandLineParser

$include VM
$include VM/NativeLibraries

RogueScript( System.command_line_arguments )

class RogueScript
  PROPERTIES
    command  : Variant

  METHODS
    method init( args:String[] )
      command = _parse_args( args )

      # trace command
      # has //options and possibly //args

      if (command//options//help or command//args.count == 0)
        _print_usage
        System.exit 0
      endIf

      local vm = VM
      NativeLibraries.register( vm )


      vm.register_global_method( "Test.PI->Real", ()=>pi )
      #vm.register_method( "String:create()->String", ()=>String() )
      vm.register_method( "String.count()->Int", ()=>VM.context.object->(as String).count )
      #{
      vm.register_method( "String.count()->Int",
        Cmd( VM.t ) subclass
          METHODS
            method execute->Variant
              return VM.context.object->(as String).count
        endSubclass
      )
      }#

      local error : Exception
      contingent
        forEach (arg in command//args)
          error = vm.include( File(arg->String) )
          necessary (not error)
        endForEach

        error = vm.update
        necessary (not error)

      unsatisfied
        #error.display
        Global.error.println error
        System.exit 1
      endContingent

    method _parse_args( args:String[] )->Variant
      # This method is unrelated to the Froley Parser
      local command = CommandLineParser().
      [
        option( "--flag",     &alias="-f" )
        option( "--help",     &aliases=["-h","-?"] )
        option( "--setting=", &alias="-s" )
      ].parse( args )
      return command

    method _print_usage
      println @|USAGE
               |  rogueScript [OPTIONS] <filepath>
               |
               |OPTIONS
               |  --help, -h, -?
               |    Show this help text.
endClass

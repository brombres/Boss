module Boss

class NativeMath [singleton]
  METHODS
    method register( vm:VM )
      VM.register_boss_type( "Rogue::Random", (boss_type) => Boss::BossRandom(boss_type) )
      #{
      vm.register_method(
        "Rogue::Random.next32()->Int32",
        () => VM.context_object->(as Rogue::Random).next32 )
      vm.register_method(
        "Rogue::Random.prior_next32()->Int32",
         () => VM.context_object->(as Rogue::BossRandom).prior_next32 )
     }#
endClass

module Rogue

class BossRandom : Rogue::Random, Boss::BossAdapted
  PROPERTIES
    m_next32 : Boss::Method

  METHODS
    method init( boss_type )

    method next32->Int32
      if (not m_next32) m_next32 = boss_type.methods[ "next32()" ]
      if (m_next32.attributes.is_native_function) return prior.next32
      else                                        return m_next32( this )

    method prior_next32->Int32: return prior.next32
endClass

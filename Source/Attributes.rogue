module Boss

class Attribute
  DEFINITIONS
    PRIMITIVE          = (Int64(1):<<:0)
    COMPOUND           = (Int64(1):<<:1)
    ENUM               = (Int64(1):<<:2)
    OBJECT             = (Int64(1):<<:3)
    ASPECT             = (Int64(1):<<:4)
    ESSENTIAL          = (Int64(1):<<:6)
    SINGLETON          = (Int64(1):<<:7)
    INSERT             = (Int64(1):<<:14)
    APPEND             = (Int64(1):<<:15)
    IS_GLOBAL          = (Int64(1):<<:19)
    REQUIRES_CLEANUP   = (Int64(1):<<:23)
    ABSTRACT           = (Int64(1):<<:24)
    FALLBACK           = (Int64(1):<<:25)
    AUGMENT            = (Int64(1):<<:26)
    PLACEHOLDER        = (Int64(1):<<:27)
    COLLECTED          = (Int64(1):<<:28)
    HAS_NATIVE_CODE    = (Int64(1):<<:29)
    USED               = (Int64(1):<<:30)
    API                = (Int64(1):<<:31)
    PRIMARY            = (Int64(1):<<:32)
    PROPAGATED         = (Int64(1):<<:33)
    EXPORT             = (Int64(1):<<:34)
    ANONYMOUS_TUPLE    = (Int64(1):<<:35)
    TUPLE              = (Int64(1):<<:36)
    DIRECT_AUTO_STORE  = (Int64(1):<<:37)
    BITFLAGS           = (Int64(1):<<:38)
    OVERRIDE           = (Int64(1):<<:39)
    FAUX               = (Int64(1):<<:40)
    PREFERRED          = (Int64(1):<<:41)
    NATIVE_TYPE        = (Int64(1):<<:42)
    DOC_GENERATED      = (Int64(1):<<:43)
    OMIT_DOC           = (Int64(1):<<:44)
    AUGMENTED          = (Int64(1):<<:45)
    REPLACE            = (Int64(1):<<:46)

    CLASSIFICATION     = (Attribute.PRIMITIVE|Attribute.COMPOUND|Attribute.ENUM|Attribute.OBJECT|Attribute.ASPECT)
endClass

$localMacro BOSS_ATTRIBUTE<<$name, $value>>
  METHODS
    method $name->Logical
      return (flags & ($value))

    method $id(set_,$name)( setting:Logical )
      if (setting) flags |= ($value)
      else         flags &= !($value)
$endLocalMacro

class Attributes : CmdList
  BOSS_ATTRIBUTE<< is_primitive,         Attribute.PRIMITIVE >>
  BOSS_ATTRIBUTE<< is_compound,          Attribute.COMPOUND >>
  BOSS_ATTRIBUTE<< is_enum,              Attribute.ENUM >>
  BOSS_ATTRIBUTE<< is_object,            Attribute.OBJECT >>
  BOSS_ATTRIBUTE<< is_aspect,            Attribute.ASPECT >>
  BOSS_ATTRIBUTE<< classification,       Attribute.CLASSIFICATION >>
  BOSS_ATTRIBUTE<< is_exported,          Attribute.EXPORT >>
  BOSS_ATTRIBUTE<< is_essential,         Attribute.ESSENTIAL >>
  BOSS_ATTRIBUTE<< is_singleton,         Attribute.SINGLETON >>
  BOSS_ATTRIBUTE<< is_insert,            Attribute.INSERT >>
  BOSS_ATTRIBUTE<< is_append,            Attribute.APPEND >>
  BOSS_ATTRIBUTE<< is_global,            Attribute.IS_GLOBAL >>
  BOSS_ATTRIBUTE<< requires_cleanup,     Attribute.REQUIRES_CLEANUP >>
  BOSS_ATTRIBUTE<< is_abstract,          Attribute.ABSTRACT >>
  BOSS_ATTRIBUTE<< is_fallback,          Attribute.FALLBACK >>
  BOSS_ATTRIBUTE<< is_augment,           Attribute.AUGMENT >>
  BOSS_ATTRIBUTE<< is_placeholder,       Attribute.PLACEHOLDER >>
  BOSS_ATTRIBUTE<< is_collected,         Attribute.COLLECTED >>
  BOSS_ATTRIBUTE<< has_native_code,      Attribute.HAS_NATIVE_CODE >>
  BOSS_ATTRIBUTE<< is_used,              Attribute.USED >>
  BOSS_ATTRIBUTE<< is_api,               Attribute.API >>
  BOSS_ATTRIBUTE<< is_primary,           Attribute.PRIMARY >>
  BOSS_ATTRIBUTE<< is_propagated,        Attribute.PROPAGATED >>
  BOSS_ATTRIBUTE<< is_anonymous_tuple,   Attribute.ANONYMOUS_TUPLE >>
  BOSS_ATTRIBUTE<< is_tuple,             Attribute.TUPLE >>
  BOSS_ATTRIBUTE<< is_direct_auto_store, Attribute.DIRECT_AUTO_STORE >>
  BOSS_ATTRIBUTE<< bitflags,             Attribute.BITFLAGS >>
  BOSS_ATTRIBUTE<< is_override,          Attribute.OVERRIDE >>
  BOSS_ATTRIBUTE<< is_faux,              Attribute.FAUX >>
  BOSS_ATTRIBUTE<< is_preferred,         Attribute.PREFERRED >>
  BOSS_ATTRIBUTE<< is_native_type,       Attribute.NATIVE_TYPE >>
  BOSS_ATTRIBUTE<< doc_generated,        Attribute.DOC_GENERATED >>
  BOSS_ATTRIBUTE<< omit_doc,             Attribute.OMIT_DOC >>
  BOSS_ATTRIBUTE<< augmented,            Attribute.AUGMENTED >>
  BOSS_ATTRIBUTE<< is_replace,           Attribute.REPLACE >>

  PROPERTIES
    flags : Int64

  METHODS
    method init( t )

    method init( t, flags )

    method init( other:Attributes )
      t = other.t
      flags = other.flags

    method add( cmd:Cmd )
      flags |= cmd.attribute_flags

    method add( flags:Int64 )
      this.flags |= flags

    method contains( flags:Int64 )->Logical
      return (flags & flags)?

    method contains( value:String )->Logical
      if ((forEach in this)->String == value) return true
      return false

    method description->String
      return "Attributes" + list_description

    method is_reference->Logical
      return (flags & (Attribute.OBJECT | Attribute.ASPECT))?
endClass

augment
  METHODS
    method Cmd.attribute_flags->Int64
      return 0

    method AttributeAbstract.attribute_flags->Int64
      return Attribute.ABSTRACT

    method AttributeAppend.attribute_flags->Int64
      return Attribute.APPEND

    method AttributeAspect.attribute_flags->Int64
      return Attribute.ASPECT

    method AttributeAPI.attribute_flags->Int64
      return Attribute.API

    method AttributeBitflags.attribute_flags->Int64
      return Attribute.BITFLAGS

    method AttributeCompound.attribute_flags->Int64
      return Attribute.COMPOUND

    method AttributeEssential.attribute_flags->Int64
      return Attribute.ESSENTIAL

    method AttributeExport.attribute_flags->Int64
      return Attribute.EXPORT

    method AttributeFaux.attribute_flags->Int64
      return Attribute.FAUX

    method AttributeInsert.attribute_flags->Int64
      return Attribute.INSERT

    method AttributeOverride.attribute_flags->Int64
      return Attribute.OVERRIDE

    method AttributePreferred.attribute_flags->Int64
      return Attribute.PREFERRED

    method AttributePrimitive.attribute_flags->Int64
      return Attribute.PRIMITIVE

    method AttributePropagated.attribute_flags->Int64
      return Attribute.PROPAGATED

    method AttributeReplace.attribute_flags->Int64
      return Attribute.REPLACE

    method AttributeSingleton.attribute_flags->Int64
      return Attribute.SINGLETON
endAugment


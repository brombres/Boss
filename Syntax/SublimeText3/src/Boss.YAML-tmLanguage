# [PackageDev] target_format: plist, ext: tmLanguage
#
# Sublime Text 3 syntax file
# Language: Boss
# Maintainer: Shea Orr <sorr556@gmail.com>
# URL: https://github.com/brombres/Boss
# Last Change: 2015.06.03
#
# Mac OSX: Place in '~/Library/Application Support/Sublime Text 3/Packages/User/'
# Install AAAPackageDev for Sublime Text 3 (https://github.com/SublimeText/AAAPackageDev)
# With this file open in Sublime Text 3, run 'AAAPackageDev:Convert(YAML,JSON,PLIST) to...'
# from the Commmand Pallet to convert to tmLanguage format for use
#
---
name: Boss
scopeName: source.boss
fileTypes: [boss]
uuid: 973adfa5-9430-470d-bbe6-7f8d2c07ca1c

patterns:
- comment: Class|Aspect|Compound|Enumeration declaration
  name: meta.class.boss
  begin: \b(class|compound|enumeration)\b\s*
  beginCaptures:
    '1': {name: storage.type.boss}
  end: ($)
  patterns:
  - include: '#scope_declaration'
  - include: '#types'

- comment: Method|Routine|Task declaration
  name: meta.methodtype.boss
  begin: \b(method|routine|task)\b\s*
  beginCaptures:
    '1': {name: storage.type.boss}
  end: ($)
  patterns:
  - include: '#method_name'
  - include: '#method_params'
  - include: '#method_return'

- name: storage.type.boss
  match: \b(endClass|endAspect|endCompound|endEnumeration)\b

- name: storage.type.boss
  match: \b(delegate|endDelegate|function|endFunction|primitive|endPrimitive)\b

- name: storage.type.boss
  match: \b(with|endWith)\b

- name: storage.type.boss
  match: \b(augment|endAugment)\b

- name: support.function.boss
  match: \b(require|ensure|assert)\b

- include: '#comments'

- include: '#operators'

- include: '#constants'

- include: '#types'

- include: '#keywords_formatting'

- include: '#keywords_control'

- include: '#keywords_loop'

- include: '#keywords_other'

- include: '#language_variables'

- include: '#strings'

- include: '#scope_declaration'

repository:
  comments:
    patterns:
    - name: meta.comment.block.boss
      contentName: comment.block.boss
      begin: (\#\{)
      beginCaptures:
        '1': {name: comment.block.begin.boss}
      end: (\}\#)
      endCaptures:
        '1': {name: comment.block.end.boss}

    - name: comment.line.number-sign.boss
      match: ((#).*)

  operators:
    patterns:
    - name: keyword.operator.boss
      match: \b(and|or|xor|not|instanceOf|is|isNot|notInstanceOf|duplicate)\b

    - name: keyword.operator.boss
      match: (=|==|!=|\+|(?<!=\s)(?<!=)-|\*|\/|\^|%|(?<!>)>(?!>)|>=|(?<!<)<(?!<)|<=)

  constants:
    patterns:
    - name: constant.numeric.boss
      match: (\b|\-)[0-9]+\b

    - name: constant.language.boss
      match: \b(true|false|null|void|gt|lt|eq|infinity|NaN)\b

    - comment: Bytes
      name: constant.other.boss
      match: (?:0x([0-9]|[A-F]){2})

  types:
    name: storage.type.boss
    match: \b(Integer|Byte|Character|Real|Logical|null|String)\b

  language_variables:
    name: variable.language.boss
    match: \b(this|prior)\b

  keywords_formatting:
    patterns:
    - name: keyword.other.boss
      match: \b(ENUMERATE|DEFINITIONS|SETTINGS|CATEGORIES)\b

    - name: keyword.other.boss
      match: \b(PROPERTIES|METHODS|STATES|ROUTINES)\b

  keywords_control:
    patterns:
    - name: keyword.control.boss
      match: \b(which|whichIs|case|caseNext|others|endWhich|endWhichIs|block|endBlock)\b

    - name: keyword.control.boss
      match: \b(if|elseIf|else|endIf|contingent|endContingent|satisfied|unsatisfied|try|catch|endTry)\b

    - name: keyword.control.boss
      match: \b(return|necessary|sufficient|noAction|yield)\b

    - name: keyword.control.boss
      match: \b(try|catch)\b

  keywords_loop:
    patterns:
    - name: keyword.loop.boss
      match: \b(while|endWhile|forEach|endForEach|in|of|step|await)\b

    - name: keyword.loop.boss
      match: \b(loop|endloop)\b

  keywords_other:
    patterns:
    - name: keyword.other.boss
      match: \b(escapeForEach|escapeWhile|escapeLoop|escapeTry)\b
    - name: keyword.other.boss
      match: \b(escapeWhich|escapeWhichIs|escapeIf|escapeContingent|escapeBlock|nextIteration)\b

  scope_declaration:
    patterns:
    - name: storage.modifier.boss
      match: \b(readOnly|writeOnly|public|private|limited|const|local|localize|deferred|singleton|managed|primitive|aspect)\b

    - name: storage.modifier.boss
      match: \b(native|inline|inlineNative|requisite|abstract|final|propagated|foreign)\b

  method_params:
    name: meta.method.params.boss
    begin: (\()
    end: (\))
    patterns:
    - name: variable.parameter.boss
      match: (?<!:|=|\.|\$|-)\b\w+(?:(?=\=)|(?=:)|(?=,)|(?=\)))
    - include: '#strings'
    - include: '#constants'
    - include: '#operators'
    - include: '#types'

  method_name:
    name: entity.name.function.boss
    match: ((\w+)((?=\()|(?=\-)|(?=\n)))

  method_return:
    name: meta.method.return.boss
    begin: (->)
    end: ($)
    patterns:
    - include: '#scope_declaration'
    - include: '#types'
    - include: '#language_variables'

  strings:
    patterns:
    - name: string.quoted.double.boss
      match: (")(?:(?=(\\?))\2.)*?\1

    - name: string.quoted.single.boss
      match: (')(?:(?=(\\?))\2.)*?\1
...
